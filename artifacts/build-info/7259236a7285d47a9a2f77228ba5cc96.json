{"id":"7259236a7285d47a9a2f77228ba5cc96","_format":"hh-sol-build-info-1","solcVersion":"0.8.7","solcLongVersion":"0.8.7+commit.e28d00a7","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\n/**\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\n */\npragma solidity ^0.8.0;\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \"./AutomationCompatibleInterface.sol\";\n"},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"},"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"},"contracts/RossLottery.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\n\nerror RossRaffle__NotEnoughETHEntered();\nerror RossRaffle__TransferFailed();\nerror RossRaffle__NotOpen();\nerror RossRaffle_UpkeepNotNeeded(uint256 currentBalance, uint256 numplayers, uint256 raffleState);\n\ncontract RossRaffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\n    /* Types */\n    enum RaffleState {\n        OPEN,\n        CALCULATING\n    }\n\n    /* state variables */\n    uint256 private immutable i_entranceFee;\n    address payable[] private s_players;\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    bytes32 private immutable i_gasLane;\n    uint64 private immutable i_subscriptionId;\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\n    uint32 private immutable i_callbackGasLimit;\n    uint16 private constant NUM_WORDS = 1;\n\n    RaffleState private s_raffleState;\n    uint256 private s_lastTimeStamp; // last block\n    uint256 private i_interval;\n\n    // lottery vars\n    address private s_recentWinner;\n\n    /* events */\n    event RaffleEnter(address indexed player);\n    event RequestedRaffleWinner(uint256 indexed requestId);\n    event WinnerPicked(address indexed winner);\n\n    // main constructor needs to include the address param that the secondary constructor\n    constructor(\n        address vrfCoordinatorV2, //contract address.  this is a tip that we'll need to implement a MOCK if we want to do testing\n        uint256 entranceFee,\n        bytes32 gasLane,\n        uint64 subscriptionId,\n        uint32 callbackGasLimit,\n        uint256 interval\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\n        i_entranceFee = entranceFee;\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2); // wrap the address in the coordinator interface\n        i_gasLane = gasLane;\n        i_subscriptionId = subscriptionId;\n        i_callbackGasLimit = callbackGasLimit;\n\n        s_raffleState = RaffleState.OPEN;\n        s_lastTimeStamp = block.timestamp;\n        i_interval = interval;\n    }\n\n    /* functions */\n    function enterRaffle() public payable {\n        if (msg.value < i_entranceFee) {\n            revert RossRaffle__NotEnoughETHEntered();\n        }\n        if (s_raffleState != RaffleState.OPEN) {\n            revert RossRaffle__NotOpen();\n        }\n        s_players.push(payable(msg.sender));\n        emit RaffleEnter(msg.sender);\n    }\n\n    // REPLACED BY PERFORMUPKEEP\n    /*function requestRandomWinner() internal {\n        s_raffleState = RaffleState.CALCULATING;\n        // request the random number\n        //  we need to use requestRandomWords() which is in the VRFCoordinatorV2Interface contract\n        //  which means we need to get that [go to constructor and establish the coordinator object]\n        //      this returns a uint256 request ID\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane, // the \"gas lane\" which we can use to reduce gas costs.  we set this up in constructor.  called keyHash in docs.\n            i_subscriptionId, // the subscription that we need for funding our requests.  there's a contract on chain that does this for us.  we make requests to subscriptions\n            REQUEST_CONFIRMATIONS, //requestConfirmations,   // uint16 - how many confirmations we should wait before responding.  constant!\n            i_callbackGasLimit, // uint32 limit for how much gas to use for the callback request to use to fulfillrandomwords.  protects us from spaffing loads by accidents\n            NUM_WORDS // how many random numbers we want\n        );\n        emit RequestedRaffleWinner(requestId); //emit an event to track this\n\n        // once we get the random number, pick a winner from our array of participants\n        // it's a 2 transaction process which helps us avoid brute forcing issues\n    }*/\n\n    // this version is external so we need to do more validation\n    function performUpkeep(bytes memory /*performData*/) external override {\n        (bool upkeepNeeded, ) = checkUpkeep(\"\");\n        if (!upkeepNeeded) {\n            revert RossRaffle_UpkeepNotNeeded(address(this).balance, s_players.length, uint256(s_raffleState)); // for some error checking\n        }\n\n        s_raffleState = RaffleState.CALCULATING;\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane,\n            i_subscriptionId,\n            REQUEST_CONFIRMATIONS,\n            i_callbackGasLimit,\n            NUM_WORDS\n        );\n        emit RequestedRaffleWinner(requestId);\n    }\n\n    /**\n     * this is a function that chainlink keeper nodes call on a regular basis\n     * they expect it to return true\n     * when true, we do a new random winner\n     * *** for this to work, our contract needs to be in an \"open\" state\n     * *** so we are not in the middle of a previous lottery\n     */\n    function checkUpkeep(\n        bytes memory /*checkData*/\n    ) public view override returns (bool upkeepNeeded, bytes memory something) {\n        bool isOpen = (s_raffleState == RaffleState.OPEN);\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\n        bool hasPlayers = (s_players.length > 0);\n        bool hasBalance = (address(this).balance > 0);\n\n        // time to end the lottery!\n        //return (isOpen && timePassed && hasPlayers && hasBalance);\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance); // auto returns upkeepNeeded?\n    }\n\n    //randomWords will be size 1 for us, since that's all we requested in NUM_WORDS\n    function fulfillRandomWords(uint256 /*requestId*/, uint256[] memory randomWords) internal override {\n        // example: s_players is size 10 and our random n is 207\n        // 207 % 10 -> 7\n        // so the modulus will always give us a number from 0 to (size of array of participants - 1)\n        // which is perfect for picking a random winner from our array\n        uint256 n = randomWords[0] % s_players.length;\n        address payable recentWinner = s_players[n];\n        s_recentWinner = recentWinner;\n\n        s_raffleState = RaffleState.OPEN;\n        s_players = new address payable[](0);\n        s_lastTimeStamp = block.timestamp;\n\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\"\");\n        if (!success) {\n            revert RossRaffle__TransferFailed();\n        }\n        emit WinnerPicked(recentWinner);\n    }\n\n    /* views and getters */\n    function getEntranceFee() public view returns (uint256) {\n        return i_entranceFee;\n    }\n\n    function getPlayer(uint256 index) public view returns (address) {\n        return s_players[index];\n    }\n\n    function getRecentWinner() public view returns (address) {\n        return s_recentWinner;\n    }\n\n    function getRaffleState() public view returns (RaffleState) {\n        return s_raffleState;\n    }\n\n    // this isn't reading from storage - it's a constant so it's in the ABI\n    // so we can use PURE instead of VIEW to save gas\n    function getNumWords() public pure returns (uint256) {\n        return NUM_WORDS;\n    }\n\n    function getInterval() public view returns (uint256) {\n        return i_interval;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/RossLottery.sol:121:56:\n    |\n121 |     ) public view override returns (bool upkeepNeeded, bytes memory something) {\n    |                                                        ^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":5160,"file":"contracts/RossLottery.sol","start":5138},"type":"Warning"}],"sources":{"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","exportedSymbols":{"VRFConsumerBaseV2":[57]},"id":58,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"57:5275:0","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":57,"linearizedBaseContracts":[57],"name":"VRFConsumerBaseV2","nameLocation":"5351:17:0","nodeType":"ContractDefinition","nodes":[{"id":8,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5379:25:0","nodeType":"ErrorDefinition","parameters":{"id":7,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"mutability":"mutable","name":"have","nameLocation":"5413:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5405:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6,"mutability":"mutable","name":"want","nameLocation":"5427:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5419:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5,"name":"address","nodeType":"ElementaryTypeName","src":"5419:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5404:28:0"},"src":"5373:60:0"},{"constant":false,"id":10,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"5462:14:0","nodeType":"VariableDeclaration","scope":57,"src":"5436:40:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"5436:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":20,"nodeType":"Block","src":"5593:43:0","statements":[{"expression":{"id":18,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":16,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"5599:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":17,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"5616:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5599:32:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":19,"nodeType":"ExpressionStatement","src":"5599:32:0"}]},"documentation":{"id":11,"nodeType":"StructuredDocumentation","src":"5481:72:0","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":21,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"5576:15:0","nodeType":"VariableDeclaration","scope":21,"src":"5568:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"5568:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5567:25:0"},"returnParameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"5593:0:0"},"scope":57,"src":"5556:80:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":22,"nodeType":"StructuredDocumentation","src":"5640:686:0","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":30,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6338:18:0","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":24,"mutability":"mutable","name":"requestId","nameLocation":"6365:9:0","nodeType":"VariableDeclaration","scope":30,"src":"6357:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":23,"name":"uint256","nodeType":"ElementaryTypeName","src":"6357:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":27,"mutability":"mutable","name":"randomWords","nameLocation":"6393:11:0","nodeType":"VariableDeclaration","scope":30,"src":"6376:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":25,"name":"uint256","nodeType":"ElementaryTypeName","src":"6376:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":26,"nodeType":"ArrayTypeName","src":"6376:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6356:49:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"6422:0:0"},"scope":57,"src":"6329:94:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":55,"nodeType":"Block","src":"6707:167:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":38,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6717:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6717:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":40,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6731:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6717:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":49,"nodeType":"IfStatement","src":"6713:109:0","trueBody":{"id":48,"nodeType":"Block","src":"6747:75:0","statements":[{"errorCall":{"arguments":[{"expression":{"id":43,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6788:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6788:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":45,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6800:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":42,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"6762:25:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6762:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":47,"nodeType":"RevertStatement","src":"6755:60:0"}]}},{"expression":{"arguments":[{"id":51,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"6846:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":52,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"6857:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":50,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"6827:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":53,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6827:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":54,"nodeType":"ExpressionStatement","src":"6827:42:0"}]},"functionSelector":"1fe543e3","id":56,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"6627:21:0","nodeType":"FunctionDefinition","parameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"requestId","nameLocation":"6657:9:0","nodeType":"VariableDeclaration","scope":56,"src":"6649:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":31,"name":"uint256","nodeType":"ElementaryTypeName","src":"6649:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":35,"mutability":"mutable","name":"randomWords","nameLocation":"6685:11:0","nodeType":"VariableDeclaration","scope":56,"src":"6668:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":33,"name":"uint256","nodeType":"ElementaryTypeName","src":"6668:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":34,"nodeType":"ArrayTypeName","src":"6668:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6648:49:0"},"returnParameters":{"id":37,"nodeType":"ParameterList","parameters":[],"src":"6707:0:0"},"scope":57,"src":"6618:256:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":58,"src":"5333:1543:0","usedErrors":[8]}],"src":"32:6845:0"},"id":0},"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol","exportedSymbols":{"AutomationCompatibleInterface":[76]},"id":77,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":59,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":76,"linearizedBaseContracts":[76],"name":"AutomationCompatibleInterface","nameLocation":"67:29:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":60,"nodeType":"StructuredDocumentation","src":"101:985:1","text":" @notice method that is simulated by the keepers to see if any work actually\n needs to be performed. This method does does not actually need to be\n executable, and since it is only ever simulated it can consume lots of gas.\n @dev To ensure that it is never called, you may want to add the\n cannotExecute modifier from KeeperBase to your implementation of this\n method.\n @param checkData specified in the upkeep registration so it is always the\n same for a registered upkeep. This can easily be broken down into specific\n arguments using `abi.decode`, so multiple upkeeps can be registered on the\n same contract and easily differentiated by the contract.\n @return upkeepNeeded boolean to indicate whether the keeper should call\n performUpkeep or not.\n @return performData bytes that the keeper should call performUpkeep with, if\n upkeep is needed. If you would like to encode data to decode later, try\n `abi.encode`."},"functionSelector":"6e04ff0d","id":69,"implemented":false,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"1098:11:1","nodeType":"FunctionDefinition","parameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"checkData","nameLocation":"1125:9:1","nodeType":"VariableDeclaration","scope":69,"src":"1110:24:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":61,"name":"bytes","nodeType":"ElementaryTypeName","src":"1110:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1109:26:1"},"returnParameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"1159:12:1","nodeType":"VariableDeclaration","scope":69,"src":"1154:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":64,"name":"bool","nodeType":"ElementaryTypeName","src":"1154:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":67,"mutability":"mutable","name":"performData","nameLocation":"1186:11:1","nodeType":"VariableDeclaration","scope":69,"src":"1173:24:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":66,"name":"bytes","nodeType":"ElementaryTypeName","src":"1173:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1153:45:1"},"scope":76,"src":"1089:110:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":70,"nodeType":"StructuredDocumentation","src":"1203:1003:1","text":" @notice method that is actually executed by the keepers, via the registry.\n The data returned by the checkUpkeep simulation will be passed into\n this method to actually be executed.\n @dev The input to this method should not be trusted, and the caller of the\n method should not even be restricted to any single registry. Anyone should\n be able call it, and the input should be validated, there is no guarantee\n that the data passed in is the performData returned from checkUpkeep. This\n could happen due to malicious keepers, racing keepers, or simply a state\n change while the performUpkeep transaction is waiting for confirmation.\n Always validate the data passed in.\n @param performData is the data which was passed back from the checkData\n simulation. If it is encoded, it can easily be decoded into other types by\n calling `abi.decode`. This data should not be trusted, and should be\n validated against the contract's current state."},"functionSelector":"4585e33b","id":75,"implemented":false,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"2218:13:1","nodeType":"FunctionDefinition","parameters":{"id":73,"nodeType":"ParameterList","parameters":[{"constant":false,"id":72,"mutability":"mutable","name":"performData","nameLocation":"2247:11:1","nodeType":"VariableDeclaration","scope":75,"src":"2232:26:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":71,"name":"bytes","nodeType":"ElementaryTypeName","src":"2232:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2231:28:1"},"returnParameters":{"id":74,"nodeType":"ParameterList","parameters":[],"src":"2268:0:1"},"scope":76,"src":"2209:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":77,"src":"57:2214:1","usedErrors":[]}],"src":"32:2240:1"},"id":1},"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol","exportedSymbols":{"KeeperCompatibleInterface":[76]},"id":81,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":78,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"134:23:2"},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol","file":"./AutomationCompatibleInterface.sol","id":80,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":77,"src":"158:111:2","symbolAliases":[{"foreign":{"id":79,"name":"AutomationCompatibleInterface","nodeType":"Identifier","overloadedDeclarations":[],"src":"166:29:2","typeDescriptions":{}},"local":"KeeperCompatibleInterface","nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"134:136:2"},"id":2},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","exportedSymbols":{"VRFCoordinatorV2Interface":[176]},"id":177,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":82,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:3"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":176,"linearizedBaseContracts":[176],"name":"VRFCoordinatorV2Interface","nameLocation":"67:25:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"97:267:3","text":" @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"},"functionSelector":"00012291","id":93,"implemented":false,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"376:16:3","nodeType":"FunctionDefinition","parameters":{"id":84,"nodeType":"ParameterList","parameters":[],"src":"392:2:3"},"returnParameters":{"id":92,"nodeType":"ParameterList","parameters":[{"constant":false,"id":86,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":93,"src":"437:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":85,"name":"uint16","nodeType":"ElementaryTypeName","src":"437:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":88,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":93,"src":"451:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":87,"name":"uint32","nodeType":"ElementaryTypeName","src":"451:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":91,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":93,"src":"465:16:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":89,"name":"bytes32","nodeType":"ElementaryTypeName","src":"465:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":90,"nodeType":"ArrayTypeName","src":"465:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"429:58:3"},"scope":176,"src":"367:121:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":94,"nodeType":"StructuredDocumentation","src":"492:1511:3","text":" @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."},"functionSelector":"5d3b1d30","id":109,"implemented":false,"kind":"function","modifiers":[],"name":"requestRandomWords","nameLocation":"2015:18:3","nodeType":"FunctionDefinition","parameters":{"id":105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":96,"mutability":"mutable","name":"keyHash","nameLocation":"2047:7:3","nodeType":"VariableDeclaration","scope":109,"src":"2039:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":95,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2039:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":98,"mutability":"mutable","name":"subId","nameLocation":"2067:5:3","nodeType":"VariableDeclaration","scope":109,"src":"2060:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":97,"name":"uint64","nodeType":"ElementaryTypeName","src":"2060:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":100,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"2085:27:3","nodeType":"VariableDeclaration","scope":109,"src":"2078:34:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":99,"name":"uint16","nodeType":"ElementaryTypeName","src":"2078:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":102,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2125:16:3","nodeType":"VariableDeclaration","scope":109,"src":"2118:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":101,"name":"uint32","nodeType":"ElementaryTypeName","src":"2118:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":104,"mutability":"mutable","name":"numWords","nameLocation":"2154:8:3","nodeType":"VariableDeclaration","scope":109,"src":"2147:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":103,"name":"uint32","nodeType":"ElementaryTypeName","src":"2147:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2033:133:3"},"returnParameters":{"id":108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":107,"mutability":"mutable","name":"requestId","nameLocation":"2193:9:3","nodeType":"VariableDeclaration","scope":109,"src":"2185:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":106,"name":"uint256","nodeType":"ElementaryTypeName","src":"2185:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2184:19:3"},"scope":176,"src":"2006:198:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":110,"nodeType":"StructuredDocumentation","src":"2208:384:3","text":" @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"},"functionSelector":"a21a23e4","id":115,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"2604:18:3","nodeType":"FunctionDefinition","parameters":{"id":111,"nodeType":"ParameterList","parameters":[],"src":"2622:2:3"},"returnParameters":{"id":114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"subId","nameLocation":"2650:5:3","nodeType":"VariableDeclaration","scope":115,"src":"2643:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":112,"name":"uint64","nodeType":"ElementaryTypeName","src":"2643:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2642:14:3"},"scope":176,"src":"2595:62:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"2661:381:3","text":" @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."},"functionSelector":"a47c7696","id":130,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"3054:15:3","nodeType":"FunctionDefinition","parameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"subId","nameLocation":"3077:5:3","nodeType":"VariableDeclaration","scope":130,"src":"3070:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":117,"name":"uint64","nodeType":"ElementaryTypeName","src":"3070:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3069:14:3"},"returnParameters":{"id":129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":121,"mutability":"mutable","name":"balance","nameLocation":"3133:7:3","nodeType":"VariableDeclaration","scope":130,"src":"3126:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":120,"name":"uint96","nodeType":"ElementaryTypeName","src":"3126:6:3","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":123,"mutability":"mutable","name":"reqCount","nameLocation":"3155:8:3","nodeType":"VariableDeclaration","scope":130,"src":"3148:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":122,"name":"uint64","nodeType":"ElementaryTypeName","src":"3148:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":125,"mutability":"mutable","name":"owner","nameLocation":"3179:5:3","nodeType":"VariableDeclaration","scope":130,"src":"3171:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":124,"name":"address","nodeType":"ElementaryTypeName","src":"3171:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":128,"mutability":"mutable","name":"consumers","nameLocation":"3209:9:3","nodeType":"VariableDeclaration","scope":130,"src":"3192:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":126,"name":"address","nodeType":"ElementaryTypeName","src":"3192:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":127,"nodeType":"ArrayTypeName","src":"3192:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3118:106:3"},"scope":176,"src":"3045:180:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":131,"nodeType":"StructuredDocumentation","src":"3229:164:3","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"04c357cb","id":138,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"3405:32:3","nodeType":"FunctionDefinition","parameters":{"id":136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":133,"mutability":"mutable","name":"subId","nameLocation":"3445:5:3","nodeType":"VariableDeclaration","scope":138,"src":"3438:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":132,"name":"uint64","nodeType":"ElementaryTypeName","src":"3438:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":135,"mutability":"mutable","name":"newOwner","nameLocation":"3460:8:3","nodeType":"VariableDeclaration","scope":138,"src":"3452:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":134,"name":"address","nodeType":"ElementaryTypeName","src":"3452:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3437:32:3"},"returnParameters":{"id":137,"nodeType":"ParameterList","parameters":[],"src":"3478:0:3"},"scope":176,"src":"3396:83:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":139,"nodeType":"StructuredDocumentation","src":"3483:212:3","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."},"functionSelector":"82359740","id":144,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"3707:31:3","nodeType":"FunctionDefinition","parameters":{"id":142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":141,"mutability":"mutable","name":"subId","nameLocation":"3746:5:3","nodeType":"VariableDeclaration","scope":144,"src":"3739:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":140,"name":"uint64","nodeType":"ElementaryTypeName","src":"3739:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3738:14:3"},"returnParameters":{"id":143,"nodeType":"ParameterList","parameters":[],"src":"3761:0:3"},"scope":176,"src":"3698:64:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":145,"nodeType":"StructuredDocumentation","src":"3766:170:3","text":" @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"7341c10c","id":152,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"3948:11:3","nodeType":"FunctionDefinition","parameters":{"id":150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":147,"mutability":"mutable","name":"subId","nameLocation":"3967:5:3","nodeType":"VariableDeclaration","scope":152,"src":"3960:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":146,"name":"uint64","nodeType":"ElementaryTypeName","src":"3960:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":149,"mutability":"mutable","name":"consumer","nameLocation":"3982:8:3","nodeType":"VariableDeclaration","scope":152,"src":"3974:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":148,"name":"address","nodeType":"ElementaryTypeName","src":"3974:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3959:32:3"},"returnParameters":{"id":151,"nodeType":"ParameterList","parameters":[],"src":"4000:0:3"},"scope":176,"src":"3939:62:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":153,"nodeType":"StructuredDocumentation","src":"4005:172:3","text":" @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"9f87fad7","id":160,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"4189:14:3","nodeType":"FunctionDefinition","parameters":{"id":158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":155,"mutability":"mutable","name":"subId","nameLocation":"4211:5:3","nodeType":"VariableDeclaration","scope":160,"src":"4204:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":154,"name":"uint64","nodeType":"ElementaryTypeName","src":"4204:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":157,"mutability":"mutable","name":"consumer","nameLocation":"4226:8:3","nodeType":"VariableDeclaration","scope":160,"src":"4218:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":156,"name":"address","nodeType":"ElementaryTypeName","src":"4218:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4203:32:3"},"returnParameters":{"id":159,"nodeType":"ParameterList","parameters":[],"src":"4244:0:3"},"scope":176,"src":"4180:65:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":161,"nodeType":"StructuredDocumentation","src":"4249:140:3","text":" @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"d7ae1d30","id":168,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"4401:18:3","nodeType":"FunctionDefinition","parameters":{"id":166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":163,"mutability":"mutable","name":"subId","nameLocation":"4427:5:3","nodeType":"VariableDeclaration","scope":168,"src":"4420:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":162,"name":"uint64","nodeType":"ElementaryTypeName","src":"4420:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":165,"mutability":"mutable","name":"to","nameLocation":"4442:2:3","nodeType":"VariableDeclaration","scope":168,"src":"4434:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":164,"name":"address","nodeType":"ElementaryTypeName","src":"4434:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4419:26:3"},"returnParameters":{"id":167,"nodeType":"ParameterList","parameters":[],"src":"4454:0:3"},"scope":176,"src":"4392:63:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e82ad7d4","id":175,"implemented":false,"kind":"function","modifiers":[],"name":"pendingRequestExists","nameLocation":"4760:20:3","nodeType":"FunctionDefinition","parameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":170,"mutability":"mutable","name":"subId","nameLocation":"4788:5:3","nodeType":"VariableDeclaration","scope":175,"src":"4781:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":169,"name":"uint64","nodeType":"ElementaryTypeName","src":"4781:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4780:14:3"},"returnParameters":{"id":174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":175,"src":"4818:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":172,"name":"bool","nodeType":"ElementaryTypeName","src":"4818:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4817:6:3"},"scope":176,"src":"4751:73:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":177,"src":"57:4769:3","usedErrors":[]}],"src":"32:4795:3"},"id":3},"contracts/RossLottery.sol":{"ast":{"absolutePath":"contracts/RossLottery.sol","exportedSymbols":{"KeeperCompatibleInterface":[76],"RossRaffle":[572],"RossRaffle_UpkeepNotNeeded":[195],"RossRaffle__NotEnoughETHEntered":[183],"RossRaffle__NotOpen":[187],"RossRaffle__TransferFailed":[185],"VRFConsumerBaseV2":[57],"VRFCoordinatorV2Interface":[176]},"id":573,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":178,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"32:23:4"},{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","file":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","id":179,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":573,"sourceUnit":58,"src":"57:61:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","id":180,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":573,"sourceUnit":177,"src":"119:80:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol","id":181,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":573,"sourceUnit":81,"src":"200:80:4","symbolAliases":[],"unitAlias":""},{"id":183,"name":"RossRaffle__NotEnoughETHEntered","nameLocation":"288:31:4","nodeType":"ErrorDefinition","parameters":{"id":182,"nodeType":"ParameterList","parameters":[],"src":"319:2:4"},"src":"282:40:4"},{"id":185,"name":"RossRaffle__TransferFailed","nameLocation":"329:26:4","nodeType":"ErrorDefinition","parameters":{"id":184,"nodeType":"ParameterList","parameters":[],"src":"355:2:4"},"src":"323:35:4"},{"id":187,"name":"RossRaffle__NotOpen","nameLocation":"365:19:4","nodeType":"ErrorDefinition","parameters":{"id":186,"nodeType":"ParameterList","parameters":[],"src":"384:2:4"},"src":"359:28:4"},{"id":195,"name":"RossRaffle_UpkeepNotNeeded","nameLocation":"394:26:4","nodeType":"ErrorDefinition","parameters":{"id":194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":189,"mutability":"mutable","name":"currentBalance","nameLocation":"429:14:4","nodeType":"VariableDeclaration","scope":195,"src":"421:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":188,"name":"uint256","nodeType":"ElementaryTypeName","src":"421:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":191,"mutability":"mutable","name":"numplayers","nameLocation":"453:10:4","nodeType":"VariableDeclaration","scope":195,"src":"445:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":190,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":193,"mutability":"mutable","name":"raffleState","nameLocation":"473:11:4","nodeType":"VariableDeclaration","scope":195,"src":"465:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":192,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"420:65:4"},"src":"388:98:4"},{"abstract":false,"baseContracts":[{"baseName":{"id":196,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":57,"src":"511:17:4"},"id":197,"nodeType":"InheritanceSpecifier","src":"511:17:4"},{"baseName":{"id":198,"name":"KeeperCompatibleInterface","nodeType":"IdentifierPath","referencedDeclaration":76,"src":"530:25:4"},"id":199,"nodeType":"InheritanceSpecifier","src":"530:25:4"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":572,"linearizedBaseContracts":[572,76,57],"name":"RossRaffle","nameLocation":"497:10:4","nodeType":"ContractDefinition","nodes":[{"canonicalName":"RossRaffle.RaffleState","id":202,"members":[{"id":200,"name":"OPEN","nameLocation":"605:4:4","nodeType":"EnumValue","src":"605:4:4"},{"id":201,"name":"CALCULATING","nameLocation":"619:11:4","nodeType":"EnumValue","src":"619:11:4"}],"name":"RaffleState","nameLocation":"583:11:4","nodeType":"EnumDefinition","src":"578:58:4"},{"constant":false,"id":204,"mutability":"immutable","name":"i_entranceFee","nameLocation":"694:13:4","nodeType":"VariableDeclaration","scope":572,"src":"668:39:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":203,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":207,"mutability":"mutable","name":"s_players","nameLocation":"739:9:4","nodeType":"VariableDeclaration","scope":572,"src":"713:35:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[]"},"typeName":{"baseType":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"713:15:4","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":206,"nodeType":"ArrayTypeName","src":"713:17:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"private"},{"constant":false,"id":210,"mutability":"immutable","name":"i_vrfCoordinator","nameLocation":"798:16:4","nodeType":"VariableDeclaration","scope":572,"src":"754:60:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$176","typeString":"contract VRFCoordinatorV2Interface"},"typeName":{"id":209,"nodeType":"UserDefinedTypeName","pathNode":{"id":208,"name":"VRFCoordinatorV2Interface","nodeType":"IdentifierPath","referencedDeclaration":176,"src":"754:25:4"},"referencedDeclaration":176,"src":"754:25:4","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$176","typeString":"contract VRFCoordinatorV2Interface"}},"visibility":"private"},{"constant":false,"id":212,"mutability":"immutable","name":"i_gasLane","nameLocation":"846:9:4","nodeType":"VariableDeclaration","scope":572,"src":"820:35:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":211,"name":"bytes32","nodeType":"ElementaryTypeName","src":"820:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":214,"mutability":"immutable","name":"i_subscriptionId","nameLocation":"886:16:4","nodeType":"VariableDeclaration","scope":572,"src":"861:41:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":213,"name":"uint64","nodeType":"ElementaryTypeName","src":"861:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"private"},{"constant":true,"id":217,"mutability":"constant","name":"REQUEST_CONFIRMATIONS","nameLocation":"932:21:4","nodeType":"VariableDeclaration","scope":572,"src":"908:49:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":215,"name":"uint16","nodeType":"ElementaryTypeName","src":"908:6:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"33","id":216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"956:1:4","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":false,"id":219,"mutability":"immutable","name":"i_callbackGasLimit","nameLocation":"988:18:4","nodeType":"VariableDeclaration","scope":572,"src":"963:43:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":218,"name":"uint32","nodeType":"ElementaryTypeName","src":"963:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"private"},{"constant":true,"id":222,"mutability":"constant","name":"NUM_WORDS","nameLocation":"1036:9:4","nodeType":"VariableDeclaration","scope":572,"src":"1012:37:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":220,"name":"uint16","nodeType":"ElementaryTypeName","src":"1012:6:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"31","id":221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1048:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":false,"id":225,"mutability":"mutable","name":"s_raffleState","nameLocation":"1076:13:4","nodeType":"VariableDeclaration","scope":572,"src":"1056:33:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"},"typeName":{"id":224,"nodeType":"UserDefinedTypeName","pathNode":{"id":223,"name":"RaffleState","nodeType":"IdentifierPath","referencedDeclaration":202,"src":"1056:11:4"},"referencedDeclaration":202,"src":"1056:11:4","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"}},"visibility":"private"},{"constant":false,"id":227,"mutability":"mutable","name":"s_lastTimeStamp","nameLocation":"1111:15:4","nodeType":"VariableDeclaration","scope":572,"src":"1095:31:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":226,"name":"uint256","nodeType":"ElementaryTypeName","src":"1095:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":229,"mutability":"mutable","name":"i_interval","nameLocation":"1162:10:4","nodeType":"VariableDeclaration","scope":572,"src":"1146:26:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":228,"name":"uint256","nodeType":"ElementaryTypeName","src":"1146:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":231,"mutability":"mutable","name":"s_recentWinner","nameLocation":"1215:14:4","nodeType":"VariableDeclaration","scope":572,"src":"1199:30:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":230,"name":"address","nodeType":"ElementaryTypeName","src":"1199:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"id":235,"name":"RaffleEnter","nameLocation":"1259:11:4","nodeType":"EventDefinition","parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":233,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"1287:6:4","nodeType":"VariableDeclaration","scope":235,"src":"1271:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":232,"name":"address","nodeType":"ElementaryTypeName","src":"1271:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1270:24:4"},"src":"1253:42:4"},{"anonymous":false,"id":239,"name":"RequestedRaffleWinner","nameLocation":"1306:21:4","nodeType":"EventDefinition","parameters":{"id":238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":237,"indexed":true,"mutability":"mutable","name":"requestId","nameLocation":"1344:9:4","nodeType":"VariableDeclaration","scope":239,"src":"1328:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":236,"name":"uint256","nodeType":"ElementaryTypeName","src":"1328:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1327:27:4"},"src":"1300:55:4"},{"anonymous":false,"id":243,"name":"WinnerPicked","nameLocation":"1366:12:4","nodeType":"EventDefinition","parameters":{"id":242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":241,"indexed":true,"mutability":"mutable","name":"winner","nameLocation":"1395:6:4","nodeType":"VariableDeclaration","scope":243,"src":"1379:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":240,"name":"address","nodeType":"ElementaryTypeName","src":"1379:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1378:24:4"},"src":"1360:43:4"},{"body":{"id":297,"nodeType":"Block","src":"1827:401:4","statements":[{"expression":{"id":263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":261,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"1837:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":262,"name":"entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"1853:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1837:27:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":264,"nodeType":"ExpressionStatement","src":"1837:27:4"},{"expression":{"id":269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":265,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":210,"src":"1874:16:4","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$176","typeString":"contract VRFCoordinatorV2Interface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":267,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"1919:16:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":266,"name":"VRFCoordinatorV2Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"1893:25:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFCoordinatorV2Interface_$176_$","typeString":"type(contract VRFCoordinatorV2Interface)"}},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1893:43:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$176","typeString":"contract VRFCoordinatorV2Interface"}},"src":"1874:62:4","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$176","typeString":"contract VRFCoordinatorV2Interface"}},"id":270,"nodeType":"ExpressionStatement","src":"1874:62:4"},{"expression":{"id":273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":271,"name":"i_gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"1995:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":272,"name":"gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"2007:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1995:19:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":274,"nodeType":"ExpressionStatement","src":"1995:19:4"},{"expression":{"id":277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":275,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"2024:16:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":276,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"2043:14:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"2024:33:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":278,"nodeType":"ExpressionStatement","src":"2024:33:4"},{"expression":{"id":281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":279,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"2067:18:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":280,"name":"callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"2088:16:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"2067:37:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":282,"nodeType":"ExpressionStatement","src":"2067:37:4"},{"expression":{"id":286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":283,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"2115:13:4","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":284,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"2131:11:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$202_$","typeString":"type(enum RossRaffle.RaffleState)"}},"id":285,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":200,"src":"2131:16:4","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"}},"src":"2115:32:4","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"}},"id":287,"nodeType":"ExpressionStatement","src":"2115:32:4"},{"expression":{"id":291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":288,"name":"s_lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"2157:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":289,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2175:5:4","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"2175:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2157:33:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":292,"nodeType":"ExpressionStatement","src":"2157:33:4"},{"expression":{"id":295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":293,"name":"i_interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"2200:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":294,"name":"interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"2213:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2200:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":296,"nodeType":"ExpressionStatement","src":"2200:21:4"}]},"id":298,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":258,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"1809:16:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":259,"kind":"baseConstructorSpecifier","modifierName":{"id":257,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1791:17:4"},"nodeType":"ModifierInvocation","src":"1791:35:4"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":245,"mutability":"mutable","name":"vrfCoordinatorV2","nameLocation":"1528:16:4","nodeType":"VariableDeclaration","scope":298,"src":"1520:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":244,"name":"address","nodeType":"ElementaryTypeName","src":"1520:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":247,"mutability":"mutable","name":"entranceFee","nameLocation":"1658:11:4","nodeType":"VariableDeclaration","scope":298,"src":"1650:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":246,"name":"uint256","nodeType":"ElementaryTypeName","src":"1650:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":249,"mutability":"mutable","name":"gasLane","nameLocation":"1687:7:4","nodeType":"VariableDeclaration","scope":298,"src":"1679:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":248,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1679:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":251,"mutability":"mutable","name":"subscriptionId","nameLocation":"1711:14:4","nodeType":"VariableDeclaration","scope":298,"src":"1704:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":250,"name":"uint64","nodeType":"ElementaryTypeName","src":"1704:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":253,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"1742:16:4","nodeType":"VariableDeclaration","scope":298,"src":"1735:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":252,"name":"uint32","nodeType":"ElementaryTypeName","src":"1735:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":255,"mutability":"mutable","name":"interval","nameLocation":"1776:8:4","nodeType":"VariableDeclaration","scope":298,"src":"1768:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":254,"name":"uint256","nodeType":"ElementaryTypeName","src":"1768:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1510:280:4"},"returnParameters":{"id":260,"nodeType":"ParameterList","parameters":[],"src":"1827:0:4"},"scope":572,"src":"1499:729:4","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":334,"nodeType":"Block","src":"2292:296:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":301,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2306:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2306:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":303,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"2318:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2306:25:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":309,"nodeType":"IfStatement","src":"2302:96:4","trueBody":{"id":308,"nodeType":"Block","src":"2333:65:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":305,"name":"RossRaffle__NotEnoughETHEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"2354:31:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2354:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":307,"nodeType":"RevertStatement","src":"2347:40:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"},"id":313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":310,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"2411:13:4","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":311,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"2428:11:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$202_$","typeString":"type(enum RossRaffle.RaffleState)"}},"id":312,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":200,"src":"2428:16:4","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"}},"src":"2411:33:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":318,"nodeType":"IfStatement","src":"2407:92:4","trueBody":{"id":317,"nodeType":"Block","src":"2446:53:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":314,"name":"RossRaffle__NotOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"2467:19:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2467:21:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":316,"nodeType":"RevertStatement","src":"2460:28:4"}]}},{"expression":{"arguments":[{"arguments":[{"expression":{"id":324,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2531:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2531:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":323,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2523:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":322,"name":"address","nodeType":"ElementaryTypeName","src":"2523:8:4","stateMutability":"payable","typeDescriptions":{}}},"id":326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2523:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":319,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"2508:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"2508:14:4","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_payable_$dyn_storage_ptr_$_t_address_payable_$returns$__$bound_to$_t_array$_t_address_payable_$dyn_storage_ptr_$","typeString":"function (address payable[] storage pointer,address payable)"}},"id":327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2508:35:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":328,"nodeType":"ExpressionStatement","src":"2508:35:4"},{"eventCall":{"arguments":[{"expression":{"id":330,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2570:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2570:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":329,"name":"RaffleEnter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"2558:11:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2558:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":333,"nodeType":"EmitStatement","src":"2553:28:4"}]},"functionSelector":"2cfcc539","id":335,"implemented":true,"kind":"function","modifiers":[],"name":"enterRaffle","nameLocation":"2263:11:4","nodeType":"FunctionDefinition","parameters":{"id":299,"nodeType":"ParameterList","parameters":[],"src":"2274:2:4"},"returnParameters":{"id":300,"nodeType":"ParameterList","parameters":[],"src":"2292:0:4"},"scope":572,"src":"2254:334:4","stateMutability":"payable","virtual":false,"visibility":"public"},{"baseFunctions":[75],"body":{"id":385,"nodeType":"Block","src":"4162:549:4","statements":[{"assignments":[342,null],"declarations":[{"constant":false,"id":342,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"4178:12:4","nodeType":"VariableDeclaration","scope":385,"src":"4173:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":341,"name":"bool","nodeType":"ElementaryTypeName","src":"4173:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":346,"initialValue":{"arguments":[{"hexValue":"","id":344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4208:2:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":343,"name":"checkUpkeep","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"4196:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4196:15:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4172:39:4"},{"condition":{"id":348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4225:13:4","subExpression":{"id":347,"name":"upkeepNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"4226:12:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":364,"nodeType":"IfStatement","src":"4221:169:4","trueBody":{"id":363,"nodeType":"Block","src":"4240:150:4","statements":[{"errorCall":{"arguments":[{"expression":{"arguments":[{"id":352,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4296:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_RossRaffle_$572","typeString":"contract RossRaffle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_RossRaffle_$572","typeString":"contract RossRaffle"}],"id":351,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4288:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":350,"name":"address","nodeType":"ElementaryTypeName","src":"4288:7:4","typeDescriptions":{}}},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4288:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"4288:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":355,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"4311:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4311:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":359,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"4337:13:4","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"}],"id":358,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4329:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":357,"name":"uint256","nodeType":"ElementaryTypeName","src":"4329:7:4","typeDescriptions":{}}},"id":360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4329:22:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":349,"name":"RossRaffle_UpkeepNotNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"4261:26:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256) pure"}},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4261:91:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":362,"nodeType":"RevertStatement","src":"4254:98:4"}]}},{"expression":{"id":368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":365,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"4400:13:4","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":366,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"4416:11:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$202_$","typeString":"type(enum RossRaffle.RaffleState)"}},"id":367,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"CALCULATING","nodeType":"MemberAccess","referencedDeclaration":201,"src":"4416:23:4","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"}},"src":"4400:39:4","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"}},"id":369,"nodeType":"ExpressionStatement","src":"4400:39:4"},{"assignments":[371],"declarations":[{"constant":false,"id":371,"mutability":"mutable","name":"requestId","nameLocation":"4457:9:4","nodeType":"VariableDeclaration","scope":385,"src":"4449:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":370,"name":"uint256","nodeType":"ElementaryTypeName","src":"4449:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":380,"initialValue":{"arguments":[{"id":374,"name":"i_gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"4518:9:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":375,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"4541:16:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":376,"name":"REQUEST_CONFIRMATIONS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"4571:21:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":377,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"4606:18:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":378,"name":"NUM_WORDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"4638:9:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"expression":{"id":372,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":210,"src":"4469:16:4","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$176","typeString":"contract VRFCoordinatorV2Interface"}},"id":373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"requestRandomWords","nodeType":"MemberAccess","referencedDeclaration":109,"src":"4469:35:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$returns$_t_uint256_$","typeString":"function (bytes32,uint64,uint16,uint32,uint32) external returns (uint256)"}},"id":379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4469:188:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4449:208:4"},{"eventCall":{"arguments":[{"id":382,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"4694:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":381,"name":"RequestedRaffleWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"4672:21:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4672:32:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":384,"nodeType":"EmitStatement","src":"4667:37:4"}]},"functionSelector":"4585e33b","id":386,"implemented":true,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"4100:13:4","nodeType":"FunctionDefinition","overrides":{"id":339,"nodeType":"OverrideSpecifier","overrides":[],"src":"4153:8:4"},"parameters":{"id":338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":337,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":386,"src":"4114:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":336,"name":"bytes","nodeType":"ElementaryTypeName","src":"4114:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4113:30:4"},"returnParameters":{"id":340,"nodeType":"ParameterList","parameters":[],"src":"4162:0:4"},"scope":572,"src":"4091:620:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[69],"body":{"id":446,"nodeType":"Block","src":"5162:460:4","statements":[{"assignments":[398],"declarations":[{"constant":false,"id":398,"mutability":"mutable","name":"isOpen","nameLocation":"5177:6:4","nodeType":"VariableDeclaration","scope":446,"src":"5172:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":397,"name":"bool","nodeType":"ElementaryTypeName","src":"5172:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":404,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"},"id":402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":399,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"5187:13:4","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":400,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"5204:11:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$202_$","typeString":"type(enum RossRaffle.RaffleState)"}},"id":401,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":200,"src":"5204:16:4","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"}},"src":"5187:33:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":403,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5186:35:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"5172:49:4"},{"assignments":[406],"declarations":[{"constant":false,"id":406,"mutability":"mutable","name":"timePassed","nameLocation":"5236:10:4","nodeType":"VariableDeclaration","scope":446,"src":"5231:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":405,"name":"bool","nodeType":"ElementaryTypeName","src":"5231:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":415,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":407,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5251:5:4","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"5251:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":409,"name":"s_lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"5269:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5251:33:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":411,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5250:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":412,"name":"i_interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"5288:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5250:48:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":414,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5249:50:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"5231:68:4"},{"assignments":[417],"declarations":[{"constant":false,"id":417,"mutability":"mutable","name":"hasPlayers","nameLocation":"5314:10:4","nodeType":"VariableDeclaration","scope":446,"src":"5309:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":416,"name":"bool","nodeType":"ElementaryTypeName","src":"5309:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":423,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":418,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"5328:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5328:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5347:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5328:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":422,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5327:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"5309:40:4"},{"assignments":[425],"declarations":[{"constant":false,"id":425,"mutability":"mutable","name":"hasBalance","nameLocation":"5364:10:4","nodeType":"VariableDeclaration","scope":446,"src":"5359:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":424,"name":"bool","nodeType":"ElementaryTypeName","src":"5359:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":434,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":428,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5386:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_RossRaffle_$572","typeString":"contract RossRaffle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_RossRaffle_$572","typeString":"contract RossRaffle"}],"id":427,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5378:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":426,"name":"address","nodeType":"ElementaryTypeName","src":"5378:7:4","typeDescriptions":{}}},"id":429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5378:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5378:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5402:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5378:25:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":433,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5377:27:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"5359:45:4"},{"expression":{"id":444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":435,"name":"upkeepNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":393,"src":"5520:12:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":436,"name":"isOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":398,"src":"5536:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":437,"name":"timePassed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"5546:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5536:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":439,"name":"hasPlayers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":417,"src":"5560:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5536:34:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":441,"name":"hasBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"5574:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5536:48:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":443,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5535:50:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5520:65:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":445,"nodeType":"ExpressionStatement","src":"5520:65:4"}]},"documentation":{"id":387,"nodeType":"StructuredDocumentation","src":"4717:304:4","text":" this is a function that chainlink keeper nodes call on a regular basis\n they expect it to return true\n when true, we do a new random winner\n *** for this to work, our contract needs to be in an \"open\" state\n *** so we are not in the middle of a previous lottery"},"functionSelector":"6e04ff0d","id":447,"implemented":true,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"5035:11:4","nodeType":"FunctionDefinition","overrides":{"id":391,"nodeType":"OverrideSpecifier","overrides":[],"src":"5101:8:4"},"parameters":{"id":390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":389,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":447,"src":"5056:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":388,"name":"bytes","nodeType":"ElementaryTypeName","src":"5056:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5046:42:4"},"returnParameters":{"id":396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":393,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"5124:12:4","nodeType":"VariableDeclaration","scope":447,"src":"5119:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":392,"name":"bool","nodeType":"ElementaryTypeName","src":"5119:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":395,"mutability":"mutable","name":"something","nameLocation":"5151:9:4","nodeType":"VariableDeclaration","scope":447,"src":"5138:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":394,"name":"bytes","nodeType":"ElementaryTypeName","src":"5138:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5118:43:4"},"scope":572,"src":"5026:596:4","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[30],"body":{"id":517,"nodeType":"Block","src":"5811:753:4","statements":[{"assignments":[457],"declarations":[{"constant":false,"id":457,"mutability":"mutable","name":"n","nameLocation":"6091:1:4","nodeType":"VariableDeclaration","scope":517,"src":"6083:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":456,"name":"uint256","nodeType":"ElementaryTypeName","src":"6083:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":464,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":458,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"6095:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":460,"indexExpression":{"hexValue":"30","id":459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6107:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6095:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"expression":{"id":461,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"6112:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6112:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6095:33:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6083:45:4"},{"assignments":[466],"declarations":[{"constant":false,"id":466,"mutability":"mutable","name":"recentWinner","nameLocation":"6154:12:4","nodeType":"VariableDeclaration","scope":517,"src":"6138:28:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":465,"name":"address","nodeType":"ElementaryTypeName","src":"6138:15:4","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"id":470,"initialValue":{"baseExpression":{"id":467,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"6169:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":469,"indexExpression":{"id":468,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":457,"src":"6179:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6169:12:4","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"6138:43:4"},{"expression":{"id":473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":471,"name":"s_recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"6191:14:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":472,"name":"recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"6208:12:4","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"6191:29:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":474,"nodeType":"ExpressionStatement","src":"6191:29:4"},{"expression":{"id":478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":475,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"6231:13:4","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":476,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"6247:11:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$202_$","typeString":"type(enum RossRaffle.RaffleState)"}},"id":477,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":200,"src":"6247:16:4","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"}},"src":"6231:32:4","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"}},"id":479,"nodeType":"ExpressionStatement","src":"6231:32:4"},{"expression":{"id":486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":480,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"6273:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6307:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":483,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"6285:21:4","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_payable_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address payable[] memory)"},"typeName":{"baseType":{"id":481,"name":"address","nodeType":"ElementaryTypeName","src":"6289:15:4","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":482,"nodeType":"ArrayTypeName","src":"6289:17:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}}},"id":485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6285:24:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_memory_ptr","typeString":"address payable[] memory"}},"src":"6273:36:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":487,"nodeType":"ExpressionStatement","src":"6273:36:4"},{"expression":{"id":491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":488,"name":"s_lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"6319:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":489,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6337:5:4","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"6337:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6319:33:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":492,"nodeType":"ExpressionStatement","src":"6319:33:4"},{"assignments":[494,null],"declarations":[{"constant":false,"id":494,"mutability":"mutable","name":"success","nameLocation":"6369:7:4","nodeType":"VariableDeclaration","scope":517,"src":"6364:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":493,"name":"bool","nodeType":"ElementaryTypeName","src":"6364:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":505,"initialValue":{"arguments":[{"hexValue":"","id":503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6430:2:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":495,"name":"recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"6382:12:4","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"6382:17:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"arguments":[{"id":499,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6415:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_RossRaffle_$572","typeString":"contract RossRaffle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_RossRaffle_$572","typeString":"contract RossRaffle"}],"id":498,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6407:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":497,"name":"address","nodeType":"ElementaryTypeName","src":"6407:7:4","typeDescriptions":{}}},"id":500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6407:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"6407:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"6382:47:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6382:51:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6363:70:4"},{"condition":{"id":507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6447:8:4","subExpression":{"id":506,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":494,"src":"6448:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":512,"nodeType":"IfStatement","src":"6443:74:4","trueBody":{"id":511,"nodeType":"Block","src":"6457:60:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":508,"name":"RossRaffle__TransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"6478:26:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6478:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":510,"nodeType":"RevertStatement","src":"6471:35:4"}]}},{"eventCall":{"arguments":[{"id":514,"name":"recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"6544:12:4","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":513,"name":"WinnerPicked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"6531:12:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6531:26:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":516,"nodeType":"EmitStatement","src":"6526:31:4"}]},"id":518,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"5721:18:4","nodeType":"FunctionDefinition","overrides":{"id":454,"nodeType":"OverrideSpecifier","overrides":[],"src":"5802:8:4"},"parameters":{"id":453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":449,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":518,"src":"5740:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":448,"name":"uint256","nodeType":"ElementaryTypeName","src":"5740:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":452,"mutability":"mutable","name":"randomWords","nameLocation":"5780:11:4","nodeType":"VariableDeclaration","scope":518,"src":"5763:28:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":450,"name":"uint256","nodeType":"ElementaryTypeName","src":"5763:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":451,"nodeType":"ArrayTypeName","src":"5763:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5739:53:4"},"returnParameters":{"id":455,"nodeType":"ParameterList","parameters":[],"src":"5811:0:4"},"scope":572,"src":"5712:852:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":525,"nodeType":"Block","src":"6654:37:4","statements":[{"expression":{"id":523,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"6671:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":522,"id":524,"nodeType":"Return","src":"6664:20:4"}]},"functionSelector":"09bc33a7","id":526,"implemented":true,"kind":"function","modifiers":[],"name":"getEntranceFee","nameLocation":"6607:14:4","nodeType":"FunctionDefinition","parameters":{"id":519,"nodeType":"ParameterList","parameters":[],"src":"6621:2:4"},"returnParameters":{"id":522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":521,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":526,"src":"6645:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":520,"name":"uint256","nodeType":"ElementaryTypeName","src":"6645:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6644:9:4"},"scope":572,"src":"6598:93:4","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":537,"nodeType":"Block","src":"6761:40:4","statements":[{"expression":{"baseExpression":{"id":533,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"6778:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":535,"indexExpression":{"id":534,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"6788:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6778:16:4","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":532,"id":536,"nodeType":"Return","src":"6771:23:4"}]},"functionSelector":"e55ae4e8","id":538,"implemented":true,"kind":"function","modifiers":[],"name":"getPlayer","nameLocation":"6706:9:4","nodeType":"FunctionDefinition","parameters":{"id":529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":528,"mutability":"mutable","name":"index","nameLocation":"6724:5:4","nodeType":"VariableDeclaration","scope":538,"src":"6716:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":527,"name":"uint256","nodeType":"ElementaryTypeName","src":"6716:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6715:15:4"},"returnParameters":{"id":532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":531,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":538,"src":"6752:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":530,"name":"address","nodeType":"ElementaryTypeName","src":"6752:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6751:9:4"},"scope":572,"src":"6697:104:4","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":545,"nodeType":"Block","src":"6864:38:4","statements":[{"expression":{"id":543,"name":"s_recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"6881:14:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":542,"id":544,"nodeType":"Return","src":"6874:21:4"}]},"functionSelector":"473f1ddc","id":546,"implemented":true,"kind":"function","modifiers":[],"name":"getRecentWinner","nameLocation":"6816:15:4","nodeType":"FunctionDefinition","parameters":{"id":539,"nodeType":"ParameterList","parameters":[],"src":"6831:2:4"},"returnParameters":{"id":542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":541,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":546,"src":"6855:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":540,"name":"address","nodeType":"ElementaryTypeName","src":"6855:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6854:9:4"},"scope":572,"src":"6807:95:4","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":554,"nodeType":"Block","src":"6968:37:4","statements":[{"expression":{"id":552,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"6985:13:4","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"}},"functionReturnParameters":551,"id":553,"nodeType":"Return","src":"6978:20:4"}]},"functionSelector":"115cbaf5","id":555,"implemented":true,"kind":"function","modifiers":[],"name":"getRaffleState","nameLocation":"6917:14:4","nodeType":"FunctionDefinition","parameters":{"id":547,"nodeType":"ParameterList","parameters":[],"src":"6931:2:4"},"returnParameters":{"id":551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":550,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":555,"src":"6955:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"},"typeName":{"id":549,"nodeType":"UserDefinedTypeName","pathNode":{"id":548,"name":"RaffleState","nodeType":"IdentifierPath","referencedDeclaration":202,"src":"6955:11:4"},"referencedDeclaration":202,"src":"6955:11:4","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$202","typeString":"enum RossRaffle.RaffleState"}},"visibility":"internal"}],"src":"6954:13:4"},"scope":572,"src":"6908:97:4","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":562,"nodeType":"Block","src":"7194:33:4","statements":[{"expression":{"id":560,"name":"NUM_WORDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"7211:9:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":559,"id":561,"nodeType":"Return","src":"7204:16:4"}]},"functionSelector":"53a2c19a","id":563,"implemented":true,"kind":"function","modifiers":[],"name":"getNumWords","nameLocation":"7150:11:4","nodeType":"FunctionDefinition","parameters":{"id":556,"nodeType":"ParameterList","parameters":[],"src":"7161:2:4"},"returnParameters":{"id":559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":558,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":563,"src":"7185:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":557,"name":"uint256","nodeType":"ElementaryTypeName","src":"7185:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7184:9:4"},"scope":572,"src":"7141:86:4","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":570,"nodeType":"Block","src":"7286:34:4","statements":[{"expression":{"id":568,"name":"i_interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"7303:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":567,"id":569,"nodeType":"Return","src":"7296:17:4"}]},"functionSelector":"91ad27b4","id":571,"implemented":true,"kind":"function","modifiers":[],"name":"getInterval","nameLocation":"7242:11:4","nodeType":"FunctionDefinition","parameters":{"id":564,"nodeType":"ParameterList","parameters":[],"src":"7253:2:4"},"returnParameters":{"id":567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":571,"src":"7277:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":565,"name":"uint256","nodeType":"ElementaryTypeName","src":"7277:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7276:9:4"},"scope":572,"src":"7233:87:4","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":573,"src":"488:6834:4","usedErrors":[8,183,185,187,195]}],"src":"32:7291:4"},"id":4}},"contracts":{"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"VRFConsumerBaseV2":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"AutomationCompatibleInterface":{"abi":[{"inputs":[{"internalType":"bytes","name":"checkData","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"performData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"performData","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.","params":{"checkData":"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."},"returns":{"performData":"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.","upkeepNeeded":"boolean to indicate whether the keeper should call performUpkeep or not."}},"performUpkeep(bytes)":{"details":"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.","params":{"performData":"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","performUpkeep(bytes)":"4585e33b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":\"AutomationCompatibleInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkUpkeep(bytes)":{"notice":"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."},"performUpkeep(bytes)":{"notice":"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."}},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"VRFCoordinatorV2Interface":{"abi":[{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"numWords","type":"uint32"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint64,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint64,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));","returns":{"subId":"- A unique subscription id."}},"getRequestConfig()":{"returns":{"_0":"minimumRequestConfirmations global min for request confirmations","_1":"maxGasLimit global max for request gas limit","_2":"s_provingKeyHashes list of registered key hashes"}},"getSubscription(uint64)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","owner":"- owner of the subscription.","reqCount":"- number of requests for this subscription, determines fee tier."}},"removeConsumer(uint64,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"params":{"callbackGasLimit":"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]","keyHash":"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.","minimumRequestConfirmations":"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].","numWords":"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.","subId":"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."},"returns":{"requestId":"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."}},"requestSubscriptionOwnerTransfer(uint64,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","createSubscription()":"a21a23e4","getRequestConfig()":"00012291","getSubscription(uint64)":"a47c7696","pendingRequestExists(uint64)":"e82ad7d4","removeConsumer(uint64,address)":"9f87fad7","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"5d3b1d30","requestSubscriptionOwnerTransfer(uint64,address)":"04c357cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"notice":"Request subscription owner transfer."},"addConsumer(uint64,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint64,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"getSubscription(uint64)":{"notice":"Get a VRF subscription."},"removeConsumer(uint64,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"notice":"Request a set of random words."},"requestSubscriptionOwnerTransfer(uint64,address)":{"notice":"Request subscription owner transfer."}},"version":1}}},"contracts/RossLottery.sol":{"RossRaffle":{"abi":[{"inputs":[{"internalType":"address","name":"vrfCoordinatorV2","type":"address"},{"internalType":"uint256","name":"entranceFee","type":"uint256"},{"internalType":"bytes32","name":"gasLane","type":"bytes32"},{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint256","name":"interval","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"currentBalance","type":"uint256"},{"internalType":"uint256","name":"numplayers","type":"uint256"},{"internalType":"uint256","name":"raffleState","type":"uint256"}],"name":"RossRaffle_UpkeepNotNeeded","type":"error"},{"inputs":[],"name":"RossRaffle__NotEnoughETHEntered","type":"error"},{"inputs":[],"name":"RossRaffle__NotOpen","type":"error"},{"inputs":[],"name":"RossRaffle__TransferFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"}],"name":"RaffleEnter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"requestId","type":"uint256"}],"name":"RequestedRaffleWinner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"winner","type":"address"}],"name":"WinnerPicked","type":"event"},{"inputs":[{"internalType":"bytes","name":"","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"something","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"enterRaffle","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getEntranceFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getInterval","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNumWords","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getPlayer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRaffleState","outputs":[{"internalType":"enum RossRaffle.RaffleState","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRecentWinner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_21":{"entryPoint":null,"id":21,"parameterSlots":1,"returnSlots":0},"@_298":{"entryPoint":null,"id":298,"parameterSlots":6,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":312,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":335,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":358,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint32_fromMemory":{"entryPoint":381,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64_fromMemory":{"entryPoint":404,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32t_uint256_fromMemory":{"entryPoint":427,"id":null,"parameterSlots":2,"returnSlots":6},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":583,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":603,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":613,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":645,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":655,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":671,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x21":{"entryPoint":691,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":738,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":743,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":769,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":795,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint32":{"entryPoint":821,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":847,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3636:5","statements":[{"body":{"nodeType":"YulBlock","src":"70:80:5","statements":[{"nodeType":"YulAssignment","src":"80:22:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"89:5:5"},"nodeType":"YulFunctionCall","src":"89:13:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"80:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"138:5:5"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"111:26:5"},"nodeType":"YulFunctionCall","src":"111:33:5"},"nodeType":"YulExpressionStatement","src":"111:33:5"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"48:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"56:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:5","type":""}],"src":"7:143:5"},{"body":{"nodeType":"YulBlock","src":"219:80:5","statements":[{"nodeType":"YulAssignment","src":"229:22:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"244:6:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"238:5:5"},"nodeType":"YulFunctionCall","src":"238:13:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"229:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"287:5:5"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"260:26:5"},"nodeType":"YulFunctionCall","src":"260:33:5"},"nodeType":"YulExpressionStatement","src":"260:33:5"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"197:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"205:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"213:5:5","type":""}],"src":"156:143:5"},{"body":{"nodeType":"YulBlock","src":"368:80:5","statements":[{"nodeType":"YulAssignment","src":"378:22:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"393:6:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"387:5:5"},"nodeType":"YulFunctionCall","src":"387:13:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"378:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"436:5:5"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"409:26:5"},"nodeType":"YulFunctionCall","src":"409:33:5"},"nodeType":"YulExpressionStatement","src":"409:33:5"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"346:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"354:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"362:5:5","type":""}],"src":"305:143:5"},{"body":{"nodeType":"YulBlock","src":"516:79:5","statements":[{"nodeType":"YulAssignment","src":"526:22:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"541:6:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"535:5:5"},"nodeType":"YulFunctionCall","src":"535:13:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"526:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"583:5:5"}],"functionName":{"name":"validator_revert_t_uint32","nodeType":"YulIdentifier","src":"557:25:5"},"nodeType":"YulFunctionCall","src":"557:32:5"},"nodeType":"YulExpressionStatement","src":"557:32:5"}]},"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"494:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"502:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"510:5:5","type":""}],"src":"454:141:5"},{"body":{"nodeType":"YulBlock","src":"663:79:5","statements":[{"nodeType":"YulAssignment","src":"673:22:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"688:6:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"682:5:5"},"nodeType":"YulFunctionCall","src":"682:13:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"673:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"730:5:5"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"704:25:5"},"nodeType":"YulFunctionCall","src":"704:32:5"},"nodeType":"YulExpressionStatement","src":"704:32:5"}]},"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"641:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"649:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"657:5:5","type":""}],"src":"601:141:5"},{"body":{"nodeType":"YulBlock","src":"908:970:5","statements":[{"body":{"nodeType":"YulBlock","src":"955:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"957:77:5"},"nodeType":"YulFunctionCall","src":"957:79:5"},"nodeType":"YulExpressionStatement","src":"957:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"929:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"938:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"925:3:5"},"nodeType":"YulFunctionCall","src":"925:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"950:3:5","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"921:3:5"},"nodeType":"YulFunctionCall","src":"921:33:5"},"nodeType":"YulIf","src":"918:120:5"},{"nodeType":"YulBlock","src":"1048:128:5","statements":[{"nodeType":"YulVariableDeclaration","src":"1063:15:5","value":{"kind":"number","nodeType":"YulLiteral","src":"1077:1:5","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1067:6:5","type":""}]},{"nodeType":"YulAssignment","src":"1092:74:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1138:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"1149:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1134:3:5"},"nodeType":"YulFunctionCall","src":"1134:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1158:7:5"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1102:31:5"},"nodeType":"YulFunctionCall","src":"1102:64:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1092:6:5"}]}]},{"nodeType":"YulBlock","src":"1186:129:5","statements":[{"nodeType":"YulVariableDeclaration","src":"1201:16:5","value":{"kind":"number","nodeType":"YulLiteral","src":"1215:2:5","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1205:6:5","type":""}]},{"nodeType":"YulAssignment","src":"1231:74:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1277:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"1288:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1273:3:5"},"nodeType":"YulFunctionCall","src":"1273:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1297:7:5"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"1241:31:5"},"nodeType":"YulFunctionCall","src":"1241:64:5"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1231:6:5"}]}]},{"nodeType":"YulBlock","src":"1325:129:5","statements":[{"nodeType":"YulVariableDeclaration","src":"1340:16:5","value":{"kind":"number","nodeType":"YulLiteral","src":"1354:2:5","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1344:6:5","type":""}]},{"nodeType":"YulAssignment","src":"1370:74:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"1427:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:5"},"nodeType":"YulFunctionCall","src":"1412:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1436:7:5"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"1380:31:5"},"nodeType":"YulFunctionCall","src":"1380:64:5"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1370:6:5"}]}]},{"nodeType":"YulBlock","src":"1464:128:5","statements":[{"nodeType":"YulVariableDeclaration","src":"1479:16:5","value":{"kind":"number","nodeType":"YulLiteral","src":"1493:2:5","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1483:6:5","type":""}]},{"nodeType":"YulAssignment","src":"1509:73:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1554:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"1565:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1550:3:5"},"nodeType":"YulFunctionCall","src":"1550:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1574:7:5"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"1519:30:5"},"nodeType":"YulFunctionCall","src":"1519:63:5"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1509:6:5"}]}]},{"nodeType":"YulBlock","src":"1602:129:5","statements":[{"nodeType":"YulVariableDeclaration","src":"1617:17:5","value":{"kind":"number","nodeType":"YulLiteral","src":"1631:3:5","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1621:6:5","type":""}]},{"nodeType":"YulAssignment","src":"1648:73:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1693:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"1704:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1689:3:5"},"nodeType":"YulFunctionCall","src":"1689:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1713:7:5"}],"functionName":{"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulIdentifier","src":"1658:30:5"},"nodeType":"YulFunctionCall","src":"1658:63:5"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1648:6:5"}]}]},{"nodeType":"YulBlock","src":"1741:130:5","statements":[{"nodeType":"YulVariableDeclaration","src":"1756:17:5","value":{"kind":"number","nodeType":"YulLiteral","src":"1770:3:5","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1760:6:5","type":""}]},{"nodeType":"YulAssignment","src":"1787:74:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1833:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"1844:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1829:3:5"},"nodeType":"YulFunctionCall","src":"1829:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1853:7:5"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"1797:31:5"},"nodeType":"YulFunctionCall","src":"1797:64:5"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"1787:6:5"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"838:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"849:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"861:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"869:6:5","type":""},{"name":"value2","nodeType":"YulTypedName","src":"877:6:5","type":""},{"name":"value3","nodeType":"YulTypedName","src":"885:6:5","type":""},{"name":"value4","nodeType":"YulTypedName","src":"893:6:5","type":""},{"name":"value5","nodeType":"YulTypedName","src":"901:6:5","type":""}],"src":"748:1130:5"},{"body":{"nodeType":"YulBlock","src":"1924:35:5","statements":[{"nodeType":"YulAssignment","src":"1934:19:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1950:2:5","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1944:5:5"},"nodeType":"YulFunctionCall","src":"1944:9:5"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1934:6:5"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1917:6:5","type":""}],"src":"1884:75:5"},{"body":{"nodeType":"YulBlock","src":"2010:51:5","statements":[{"nodeType":"YulAssignment","src":"2020:35:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2049:5:5"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"2031:17:5"},"nodeType":"YulFunctionCall","src":"2031:24:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2020:7:5"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1992:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2002:7:5","type":""}],"src":"1965:96:5"},{"body":{"nodeType":"YulBlock","src":"2112:32:5","statements":[{"nodeType":"YulAssignment","src":"2122:16:5","value":{"name":"value","nodeType":"YulIdentifier","src":"2133:5:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2122:7:5"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2094:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2104:7:5","type":""}],"src":"2067:77:5"},{"body":{"nodeType":"YulBlock","src":"2195:81:5","statements":[{"nodeType":"YulAssignment","src":"2205:65:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2220:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"2227:42:5","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2216:3:5"},"nodeType":"YulFunctionCall","src":"2216:54:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2205:7:5"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2177:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2187:7:5","type":""}],"src":"2150:126:5"},{"body":{"nodeType":"YulBlock","src":"2327:32:5","statements":[{"nodeType":"YulAssignment","src":"2337:16:5","value":{"name":"value","nodeType":"YulIdentifier","src":"2348:5:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2337:7:5"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2309:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2319:7:5","type":""}],"src":"2282:77:5"},{"body":{"nodeType":"YulBlock","src":"2409:49:5","statements":[{"nodeType":"YulAssignment","src":"2419:33:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2434:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"2441:10:5","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2430:3:5"},"nodeType":"YulFunctionCall","src":"2430:22:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2419:7:5"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2391:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2401:7:5","type":""}],"src":"2365:93:5"},{"body":{"nodeType":"YulBlock","src":"2508:57:5","statements":[{"nodeType":"YulAssignment","src":"2518:41:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2533:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"2540:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2529:3:5"},"nodeType":"YulFunctionCall","src":"2529:30:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2518:7:5"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2490:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2500:7:5","type":""}],"src":"2464:101:5"},{"body":{"nodeType":"YulBlock","src":"2599:152:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2616:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2619:77:5","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2609:6:5"},"nodeType":"YulFunctionCall","src":"2609:88:5"},"nodeType":"YulExpressionStatement","src":"2609:88:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2713:1:5","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2716:4:5","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2706:6:5"},"nodeType":"YulFunctionCall","src":"2706:15:5"},"nodeType":"YulExpressionStatement","src":"2706:15:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2737:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2740:4:5","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2730:6:5"},"nodeType":"YulFunctionCall","src":"2730:15:5"},"nodeType":"YulExpressionStatement","src":"2730:15:5"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"2571:180:5"},{"body":{"nodeType":"YulBlock","src":"2846:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2863:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2866:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2856:6:5"},"nodeType":"YulFunctionCall","src":"2856:12:5"},"nodeType":"YulExpressionStatement","src":"2856:12:5"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"2757:117:5"},{"body":{"nodeType":"YulBlock","src":"2969:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2986:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2989:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2979:6:5"},"nodeType":"YulFunctionCall","src":"2979:12:5"},"nodeType":"YulExpressionStatement","src":"2979:12:5"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"2880:117:5"},{"body":{"nodeType":"YulBlock","src":"3046:79:5","statements":[{"body":{"nodeType":"YulBlock","src":"3103:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3112:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3115:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3105:6:5"},"nodeType":"YulFunctionCall","src":"3105:12:5"},"nodeType":"YulExpressionStatement","src":"3105:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3069:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3094:5:5"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3076:17:5"},"nodeType":"YulFunctionCall","src":"3076:24:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3066:2:5"},"nodeType":"YulFunctionCall","src":"3066:35:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3059:6:5"},"nodeType":"YulFunctionCall","src":"3059:43:5"},"nodeType":"YulIf","src":"3056:63:5"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3039:5:5","type":""}],"src":"3003:122:5"},{"body":{"nodeType":"YulBlock","src":"3174:79:5","statements":[{"body":{"nodeType":"YulBlock","src":"3231:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3240:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3243:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3233:6:5"},"nodeType":"YulFunctionCall","src":"3233:12:5"},"nodeType":"YulExpressionStatement","src":"3233:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3197:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3222:5:5"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"3204:17:5"},"nodeType":"YulFunctionCall","src":"3204:24:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3194:2:5"},"nodeType":"YulFunctionCall","src":"3194:35:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3187:6:5"},"nodeType":"YulFunctionCall","src":"3187:43:5"},"nodeType":"YulIf","src":"3184:63:5"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3167:5:5","type":""}],"src":"3131:122:5"},{"body":{"nodeType":"YulBlock","src":"3302:79:5","statements":[{"body":{"nodeType":"YulBlock","src":"3359:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3368:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3371:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3361:6:5"},"nodeType":"YulFunctionCall","src":"3361:12:5"},"nodeType":"YulExpressionStatement","src":"3361:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3325:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3350:5:5"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3332:17:5"},"nodeType":"YulFunctionCall","src":"3332:24:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3322:2:5"},"nodeType":"YulFunctionCall","src":"3322:35:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3315:6:5"},"nodeType":"YulFunctionCall","src":"3315:43:5"},"nodeType":"YulIf","src":"3312:63:5"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3295:5:5","type":""}],"src":"3259:122:5"},{"body":{"nodeType":"YulBlock","src":"3429:78:5","statements":[{"body":{"nodeType":"YulBlock","src":"3485:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3494:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3497:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3487:6:5"},"nodeType":"YulFunctionCall","src":"3487:12:5"},"nodeType":"YulExpressionStatement","src":"3487:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3452:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3476:5:5"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"3459:16:5"},"nodeType":"YulFunctionCall","src":"3459:23:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3449:2:5"},"nodeType":"YulFunctionCall","src":"3449:34:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3442:6:5"},"nodeType":"YulFunctionCall","src":"3442:42:5"},"nodeType":"YulIf","src":"3439:62:5"}]},"name":"validator_revert_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3422:5:5","type":""}],"src":"3387:120:5"},{"body":{"nodeType":"YulBlock","src":"3555:78:5","statements":[{"body":{"nodeType":"YulBlock","src":"3611:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3620:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3623:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3613:6:5"},"nodeType":"YulFunctionCall","src":"3613:12:5"},"nodeType":"YulExpressionStatement","src":"3613:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3578:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3602:5:5"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"3585:16:5"},"nodeType":"YulFunctionCall","src":"3585:23:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3575:2:5"},"nodeType":"YulFunctionCall","src":"3575:34:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3568:6:5"},"nodeType":"YulFunctionCall","src":"3568:42:5"},"nodeType":"YulIf","src":"3565:62:5"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3548:5:5","type":""}],"src":"3513:120:5"}]},"contents":"{\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint32(value)\n    }\n\n    function abi_decode_t_uint64_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 192) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint32(value) {\n        if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n}\n","id":5,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101406040523480156200001257600080fd5b5060405162001689380380620016898339818101604052810190620000389190620001ab565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160006101000a81548160ff02191690836001811115620001195762000118620002b3565b5b0217905550426002819055508060038190555050505050505062000369565b6000815190506200014981620002e7565b92915050565b600081519050620001608162000301565b92915050565b60008151905062000177816200031b565b92915050565b6000815190506200018e8162000335565b92915050565b600081519050620001a5816200034f565b92915050565b60008060008060008060c08789031215620001cb57620001ca620002e2565b5b6000620001db89828a0162000138565b9650506020620001ee89828a0162000166565b95505060406200020189828a016200014f565b94505060606200021489828a0162000194565b93505060806200022789828a016200017d565b92505060a06200023a89828a0162000166565b9150509295509295509295565b6000620002548262000265565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f28162000247565b8114620002fe57600080fd5b50565b6200030c816200025b565b81146200031857600080fd5b50565b620003268162000285565b81146200033257600080fd5b50565b62000340816200028f565b81146200034c57600080fd5b50565b6200035a816200029f565b81146200036657600080fd5b50565b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c6112b6620003d360003960006105e9015260006105c6015260006105a501526000610569015260008181610248015261034501526000818161028501526102d901526112b66000f3fe6080604052600436106100915760003560e01c8063473f1ddc11610059578063473f1ddc1461014857806353a2c19a146101735780636e04ff0d1461019e57806391ad27b4146101dc578063e55ae4e81461020757610091565b806309bc33a714610096578063115cbaf5146100c15780631fe543e3146100ec5780632cfcc539146101155780634585e33b1461011f575b600080fd5b3480156100a257600080fd5b506100ab610244565b6040516100b89190610eaf565b60405180910390f35b3480156100cd57600080fd5b506100d661026c565b6040516100e39190610e94565b60405180910390f35b3480156100f857600080fd5b50610113600480360381019061010e9190610c79565b610283565b005b61011d610343565b005b34801561012b57600080fd5b5061014660048036038101906101419190610bd6565b6104b2565b005b34801561015457600080fd5b5061015d6106b0565b60405161016a9190610dcd565b60405180910390f35b34801561017f57600080fd5b506101886106da565b6040516101959190610eaf565b60405180910390f35b3480156101aa57600080fd5b506101c560048036038101906101c09190610bd6565b6106e7565b6040516101d3929190610e11565b60405180910390f35b3480156101e857600080fd5b506101f1610775565b6040516101fe9190610eaf565b60405180910390f35b34801561021357600080fd5b5061022e60048036038101906102299190610c1f565b61077f565b60405161023b9190610dcd565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461033557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161032c929190610de8565b60405180910390fd5b61033f82826107c6565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561039d576040517f103c37ff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156103b1576103b061119b565b5b600160009054906101000a900460ff1660018111156103d3576103d261119b565b5b1461040a576040517fd6b7f30500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006104cc604051806020016040528060008152506106e7565b5090508061053b5747600080549050600160009054906101000a900460ff1660018111156104fd576104fc61119b565b5b6040517f697a2a3e00000000000000000000000000000000000000000000000000000000815260040161053293929190610eca565b60405180910390fd5b60018060006101000a81548160ff021916908360018111156105605761055f61119b565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161062a959493929190610e41565b602060405180830381600087803b15801561064457600080fd5b505af1158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c9190610c4c565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a2505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600161ffff16905090565b600060606000806001811115610700576106ff61119b565b5b600160009054906101000a900460ff1660018111156107225761072161119b565b5b1490506000600354600254426107389190610faa565b119050600080600080549050119050600080471190508380156107585750825b80156107615750815b801561076a5750805b955050505050915091565b6000600354905090565b6000808281548110610794576107936111ca565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106107e1576107e06111ca565b5b60200260200101516107f3919061110c565b9050600080828154811061080a576108096111ca565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548160ff0219169083600181111561089e5761089d61119b565b5b0217905550600067ffffffffffffffff8111156108be576108bd6111f9565b5b6040519080825280602002602001820160405280156108ec5781602001602082028036833780820191505090505b50600090805190602001906109029291906109f7565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff164760405161093090610db8565b60006040518083038185875af1925050503d806000811461096d576040519150601f19603f3d011682016040523d82523d6000602084013e610972565b606091505b50509050806109ad576040517f93861d6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610a70579160200282015b82811115610a6f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a17565b5b509050610a7d9190610a81565b5090565b5b80821115610a9a576000816000905550600101610a82565b5090565b6000610ab1610aac84610f26565b610f01565b90508083825260208201905082856020860282011115610ad457610ad361122d565b5b60005b85811015610b045781610aea8882610bac565b845260208401935060208301925050600181019050610ad7565b5050509392505050565b6000610b21610b1c84610f52565b610f01565b905082815260208101848484011115610b3d57610b3c611232565b5b610b48848285611099565b509392505050565b600082601f830112610b6557610b64611228565b5b8135610b75848260208601610a9e565b91505092915050565b600082601f830112610b9357610b92611228565b5b8135610ba3848260208601610b0e565b91505092915050565b600081359050610bbb81611269565b92915050565b600081519050610bd081611269565b92915050565b600060208284031215610bec57610beb61123c565b5b600082013567ffffffffffffffff811115610c0a57610c09611237565b5b610c1684828501610b7e565b91505092915050565b600060208284031215610c3557610c3461123c565b5b6000610c4384828501610bac565b91505092915050565b600060208284031215610c6257610c6161123c565b5b6000610c7084828501610bc1565b91505092915050565b60008060408385031215610c9057610c8f61123c565b5b6000610c9e85828601610bac565b925050602083013567ffffffffffffffff811115610cbf57610cbe611237565b5b610ccb85828601610b50565b9150509250929050565b610cde81610fde565b82525050565b610ced81610ff0565b82525050565b610cfc81610ffc565b82525050565b6000610d0d82610f83565b610d178185610f8e565b9350610d278185602086016110a8565b610d3081611241565b840191505092915050565b610d4481611075565b82525050565b6000610d57600083610f9f565b9150610d6282611252565b600082019050919050565b610d7681611019565b82525050565b610d8581611087565b82525050565b610d9481611047565b82525050565b610da381611051565b82525050565b610db281611061565b82525050565b6000610dc382610d4a565b9150819050919050565b6000602082019050610de26000830184610cd5565b92915050565b6000604082019050610dfd6000830185610cd5565b610e0a6020830184610cd5565b9392505050565b6000604082019050610e266000830185610ce4565b8181036020830152610e388184610d02565b90509392505050565b600060a082019050610e566000830188610cf3565b610e636020830187610da9565b610e706040830186610d6d565b610e7d6060830185610d9a565b610e8a6080830184610d7c565b9695505050505050565b6000602082019050610ea96000830184610d3b565b92915050565b6000602082019050610ec46000830184610d8b565b92915050565b6000606082019050610edf6000830186610d8b565b610eec6020830185610d8b565b610ef96040830184610d8b565b949350505050565b6000610f0b610f1c565b9050610f1782826110db565b919050565b6000604051905090565b600067ffffffffffffffff821115610f4157610f406111f9565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610f6d57610f6c6111f9565b5b610f7682611241565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610fb582611047565b9150610fc083611047565b925082821015610fd357610fd261113d565b5b828203905092915050565b6000610fe982611027565b9050919050565b60008115159050919050565b6000819050919050565b600081905061101482611255565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600061108082611006565b9050919050565b600061109282611019565b9050919050565b82818337600083830152505050565b60005b838110156110c65780820151818401526020810190506110ab565b838111156110d5576000848401525b50505050565b6110e482611241565b810181811067ffffffffffffffff82111715611103576111026111f9565b5b80604052505050565b600061111782611047565b915061112283611047565b9250826111325761113161116c565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106112665761126561119b565b5b50565b61127281611047565b811461127d57600080fd5b5056fea264697066735822122002c2cc73b6d25f85d769a9f0ba839aab610c1ad7473d86303eef8aa8ad3f927664736f6c63430008070033","opcodes":"PUSH2 0x140 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1689 CODESIZE SUB DUP1 PUSH3 0x1689 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x38 SWAP2 SWAP1 PUSH3 0x1AB JUMP JUMPDEST DUP6 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP POP DUP5 PUSH1 0xA0 DUP2 DUP2 MSTORE POP POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP DUP4 PUSH1 0xE0 DUP2 DUP2 MSTORE POP POP DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x100 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xC0 SHL DUP2 MSTORE POP POP DUP2 PUSH4 0xFFFFFFFF AND PUSH2 0x120 DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE POP POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH3 0x119 JUMPI PUSH3 0x118 PUSH3 0x2B3 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP TIMESTAMP PUSH1 0x2 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x3 DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP PUSH3 0x369 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x149 DUP2 PUSH3 0x2E7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x160 DUP2 PUSH3 0x301 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x177 DUP2 PUSH3 0x31B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x18E DUP2 PUSH3 0x335 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1A5 DUP2 PUSH3 0x34F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x1CB JUMPI PUSH3 0x1CA PUSH3 0x2E2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1DB DUP10 DUP3 DUP11 ADD PUSH3 0x138 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH3 0x1EE DUP10 DUP3 DUP11 ADD PUSH3 0x166 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH3 0x201 DUP10 DUP3 DUP11 ADD PUSH3 0x14F JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH3 0x214 DUP10 DUP3 DUP11 ADD PUSH3 0x194 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH3 0x227 DUP10 DUP3 DUP11 ADD PUSH3 0x17D JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH3 0x23A DUP10 DUP3 DUP11 ADD PUSH3 0x166 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x254 DUP3 PUSH3 0x265 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2F2 DUP2 PUSH3 0x247 JUMP JUMPDEST DUP2 EQ PUSH3 0x2FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x30C DUP2 PUSH3 0x25B JUMP JUMPDEST DUP2 EQ PUSH3 0x318 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x326 DUP2 PUSH3 0x285 JUMP JUMPDEST DUP2 EQ PUSH3 0x332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x340 DUP2 PUSH3 0x28F JUMP JUMPDEST DUP2 EQ PUSH3 0x34C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x35A DUP2 PUSH3 0x29F JUMP JUMPDEST DUP2 EQ PUSH3 0x366 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0xC0 SHR PUSH2 0x120 MLOAD PUSH1 0xE0 SHR PUSH2 0x12B6 PUSH3 0x3D3 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x5E9 ADD MSTORE PUSH1 0x0 PUSH2 0x5C6 ADD MSTORE PUSH1 0x0 PUSH2 0x5A5 ADD MSTORE PUSH1 0x0 PUSH2 0x569 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x248 ADD MSTORE PUSH2 0x345 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x285 ADD MSTORE PUSH2 0x2D9 ADD MSTORE PUSH2 0x12B6 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x91 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x473F1DDC GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x473F1DDC EQ PUSH2 0x148 JUMPI DUP1 PUSH4 0x53A2C19A EQ PUSH2 0x173 JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0x91AD27B4 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0xE55AE4E8 EQ PUSH2 0x207 JUMPI PUSH2 0x91 JUMP JUMPDEST DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0x96 JUMPI DUP1 PUSH4 0x115CBAF5 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0x2CFCC539 EQ PUSH2 0x115 JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0x11F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x244 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xEAF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x26C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0xE94 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x113 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x10E SWAP2 SWAP1 PUSH2 0xC79 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11D PUSH2 0x343 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x146 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xBD6 JUMP JUMPDEST PUSH2 0x4B2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH2 0x6B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16A SWAP2 SWAP1 PUSH2 0xDCD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x188 PUSH2 0x6DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x195 SWAP2 SWAP1 PUSH2 0xEAF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C0 SWAP2 SWAP1 PUSH2 0xBD6 JUMP JUMPDEST PUSH2 0x6E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D3 SWAP3 SWAP2 SWAP1 PUSH2 0xE11 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH2 0x775 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FE SWAP2 SWAP1 PUSH2 0xEAF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x229 SWAP2 SWAP1 PUSH2 0xC1F JUMP JUMPDEST PUSH2 0x77F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23B SWAP2 SWAP1 PUSH2 0xDCD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x335 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32C SWAP3 SWAP2 SWAP1 PUSH2 0xDE8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x33F DUP3 DUP3 PUSH2 0x7C6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x39D JUMPI PUSH1 0x40 MLOAD PUSH32 0x103C37FF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x3B1 JUMPI PUSH2 0x3B0 PUSH2 0x119B JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x3D3 JUMPI PUSH2 0x3D2 PUSH2 0x119B JUMP JUMPDEST JUMPDEST EQ PUSH2 0x40A JUMPI PUSH1 0x40 MLOAD PUSH32 0xD6B7F30500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x805E1D667BDDB8A95F0F09880CF94F403FB596CE79928D9F29B74203BA284D4 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4CC PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x6E7 JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x53B JUMPI SELFBALANCE PUSH1 0x0 DUP1 SLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x4FD JUMPI PUSH2 0x4FC PUSH2 0x119B JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x697A2A3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x532 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xECA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x560 JUMPI PUSH2 0x55F PUSH2 0x119B JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x62A SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE41 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x644 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x658 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x67C SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST SWAP1 POP DUP1 PUSH32 0xCD6E45C8998311CAB7E9D4385596CAC867E20A0587194B954FA3A731C93CE78B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0xFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x700 JUMPI PUSH2 0x6FF PUSH2 0x119B JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x722 JUMPI PUSH2 0x721 PUSH2 0x119B JUMP JUMPDEST JUMPDEST EQ SWAP1 POP PUSH1 0x0 PUSH1 0x3 SLOAD PUSH1 0x2 SLOAD TIMESTAMP PUSH2 0x738 SWAP2 SWAP1 PUSH2 0xFAA JUMP JUMPDEST GT SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SLOAD SWAP1 POP GT SWAP1 POP PUSH1 0x0 DUP1 SELFBALANCE GT SWAP1 POP DUP4 DUP1 ISZERO PUSH2 0x758 JUMPI POP DUP3 JUMPDEST DUP1 ISZERO PUSH2 0x761 JUMPI POP DUP2 JUMPDEST DUP1 ISZERO PUSH2 0x76A JUMPI POP DUP1 JUMPDEST SWAP6 POP POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x794 JUMPI PUSH2 0x793 PUSH2 0x11CA JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD SWAP1 POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7E1 JUMPI PUSH2 0x7E0 PUSH2 0x11CA JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7F3 SWAP2 SWAP1 PUSH2 0x110C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x80A JUMPI PUSH2 0x809 PUSH2 0x11CA JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH1 0x4 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x89E JUMPI PUSH2 0x89D PUSH2 0x119B JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x8BE JUMPI PUSH2 0x8BD PUSH2 0x11F9 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8EC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x902 SWAP3 SWAP2 SWAP1 PUSH2 0x9F7 JUMP JUMPDEST POP TIMESTAMP PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFBALANCE PUSH1 0x40 MLOAD PUSH2 0x930 SWAP1 PUSH2 0xDB8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x96D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x972 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x9AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x93861D6800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x5B690EC4A06FE979403046EAEEA5B3CE38524683C3001F662C8B5A829632F7DF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0xA70 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xA6F JUMPI DUP3 MLOAD DUP3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xA17 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0xA7D SWAP2 SWAP1 PUSH2 0xA81 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xA9A JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0xA82 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAB1 PUSH2 0xAAC DUP5 PUSH2 0xF26 JUMP JUMPDEST PUSH2 0xF01 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0xAD4 JUMPI PUSH2 0xAD3 PUSH2 0x122D JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xB04 JUMPI DUP2 PUSH2 0xAEA DUP9 DUP3 PUSH2 0xBAC JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xAD7 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB21 PUSH2 0xB1C DUP5 PUSH2 0xF52 JUMP JUMPDEST PUSH2 0xF01 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xB3D JUMPI PUSH2 0xB3C PUSH2 0x1232 JUMP JUMPDEST JUMPDEST PUSH2 0xB48 DUP5 DUP3 DUP6 PUSH2 0x1099 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB65 JUMPI PUSH2 0xB64 PUSH2 0x1228 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xB75 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xA9E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB93 JUMPI PUSH2 0xB92 PUSH2 0x1228 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBA3 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xB0E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBBB DUP2 PUSH2 0x1269 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xBD0 DUP2 PUSH2 0x1269 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBEC JUMPI PUSH2 0xBEB PUSH2 0x123C JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC0A JUMPI PUSH2 0xC09 PUSH2 0x1237 JUMP JUMPDEST JUMPDEST PUSH2 0xC16 DUP5 DUP3 DUP6 ADD PUSH2 0xB7E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC35 JUMPI PUSH2 0xC34 PUSH2 0x123C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC43 DUP5 DUP3 DUP6 ADD PUSH2 0xBAC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC62 JUMPI PUSH2 0xC61 PUSH2 0x123C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC70 DUP5 DUP3 DUP6 ADD PUSH2 0xBC1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC90 JUMPI PUSH2 0xC8F PUSH2 0x123C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC9E DUP6 DUP3 DUP7 ADD PUSH2 0xBAC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCBF JUMPI PUSH2 0xCBE PUSH2 0x1237 JUMP JUMPDEST JUMPDEST PUSH2 0xCCB DUP6 DUP3 DUP7 ADD PUSH2 0xB50 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xCDE DUP2 PUSH2 0xFDE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCED DUP2 PUSH2 0xFF0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCFC DUP2 PUSH2 0xFFC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD0D DUP3 PUSH2 0xF83 JUMP JUMPDEST PUSH2 0xD17 DUP2 DUP6 PUSH2 0xF8E JUMP JUMPDEST SWAP4 POP PUSH2 0xD27 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x10A8 JUMP JUMPDEST PUSH2 0xD30 DUP2 PUSH2 0x1241 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xD44 DUP2 PUSH2 0x1075 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD57 PUSH1 0x0 DUP4 PUSH2 0xF9F JUMP JUMPDEST SWAP2 POP PUSH2 0xD62 DUP3 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD76 DUP2 PUSH2 0x1019 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xD85 DUP2 PUSH2 0x1087 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xD94 DUP2 PUSH2 0x1047 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xDA3 DUP2 PUSH2 0x1051 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xDB2 DUP2 PUSH2 0x1061 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDC3 DUP3 PUSH2 0xD4A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xDE2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCD5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xDFD PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xCD5 JUMP JUMPDEST PUSH2 0xE0A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCD5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xE26 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xCE4 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xE38 DUP2 DUP5 PUSH2 0xD02 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0xE56 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0xCF3 JUMP JUMPDEST PUSH2 0xE63 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0xE70 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0xD6D JUMP JUMPDEST PUSH2 0xE7D PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xD9A JUMP JUMPDEST PUSH2 0xE8A PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0xD7C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xEA9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD3B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xEC4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD8B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xEDF PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xD8B JUMP JUMPDEST PUSH2 0xEEC PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xD8B JUMP JUMPDEST PUSH2 0xEF9 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xD8B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF0B PUSH2 0xF1C JUMP JUMPDEST SWAP1 POP PUSH2 0xF17 DUP3 DUP3 PUSH2 0x10DB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xF41 JUMPI PUSH2 0xF40 PUSH2 0x11F9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xF6D JUMPI PUSH2 0xF6C PUSH2 0x11F9 JUMP JUMPDEST JUMPDEST PUSH2 0xF76 DUP3 PUSH2 0x1241 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFB5 DUP3 PUSH2 0x1047 JUMP JUMPDEST SWAP2 POP PUSH2 0xFC0 DUP4 PUSH2 0x1047 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0xFD3 JUMPI PUSH2 0xFD2 PUSH2 0x113D JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFE9 DUP3 PUSH2 0x1027 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x1014 DUP3 PUSH2 0x1255 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1080 DUP3 PUSH2 0x1006 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1092 DUP3 PUSH2 0x1019 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x10C6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x10AB JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x10D5 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x10E4 DUP3 PUSH2 0x1241 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1103 JUMPI PUSH2 0x1102 PUSH2 0x11F9 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1117 DUP3 PUSH2 0x1047 JUMP JUMPDEST SWAP2 POP PUSH2 0x1122 DUP4 PUSH2 0x1047 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x1132 JUMPI PUSH2 0x1131 PUSH2 0x116C JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x1266 JUMPI PUSH2 0x1265 PUSH2 0x119B JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH2 0x1272 DUP2 PUSH2 0x1047 JUMP JUMPDEST DUP2 EQ PUSH2 0x127D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MUL 0xC2 0xCC PUSH20 0xB6D25F85D769A9F0BA839AAB610C1AD7473D8630 RETURNDATACOPY 0xEF DUP11 0xA8 0xAD EXTCODEHASH SWAP3 PUSH23 0x64736F6C63430008070033000000000000000000000000 ","sourceMap":"488:6834:4:-:0;;;1499:729;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1809:16;5616:15:0;5599:32;;;;;;;;;;;;5556:80;1853:11:4::1;1837:27;;;;::::0;::::1;1919:16;1874:62;;;;;;;;;;::::0;::::1;2007:7;1995:19;;;;::::0;::::1;2043:14;2024:33;;;;;;;;;;::::0;::::1;2088:16;2067:37;;;;;;;;;;::::0;::::1;2131:16;2115:13;;:32;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;2175:15;2157;:33;;;;2213:8;2200:10;:21;;;;1499:729:::0;;;;;;488:6834;;7:143:5;64:5;95:6;89:13;80:22;;111:33;138:5;111:33;:::i;:::-;7:143;;;;:::o;156:::-;213:5;244:6;238:13;229:22;;260:33;287:5;260:33;:::i;:::-;156:143;;;;:::o;305:::-;362:5;393:6;387:13;378:22;;409:33;436:5;409:33;:::i;:::-;305:143;;;;:::o;454:141::-;510:5;541:6;535:13;526:22;;557:32;583:5;557:32;:::i;:::-;454:141;;;;:::o;601:::-;657:5;688:6;682:13;673:22;;704:32;730:5;704:32;:::i;:::-;601:141;;;;:::o;748:1130::-;861:6;869;877;885;893;901;950:3;938:9;929:7;925:23;921:33;918:120;;;957:79;;:::i;:::-;918:120;1077:1;1102:64;1158:7;1149:6;1138:9;1134:22;1102:64;:::i;:::-;1092:74;;1048:128;1215:2;1241:64;1297:7;1288:6;1277:9;1273:22;1241:64;:::i;:::-;1231:74;;1186:129;1354:2;1380:64;1436:7;1427:6;1416:9;1412:22;1380:64;:::i;:::-;1370:74;;1325:129;1493:2;1519:63;1574:7;1565:6;1554:9;1550:22;1519:63;:::i;:::-;1509:73;;1464:128;1631:3;1658:63;1713:7;1704:6;1693:9;1689:22;1658:63;:::i;:::-;1648:73;;1602:129;1770:3;1797:64;1853:7;1844:6;1833:9;1829:22;1797:64;:::i;:::-;1787:74;;1741:130;748:1130;;;;;;;;:::o;1965:96::-;2002:7;2031:24;2049:5;2031:24;:::i;:::-;2020:35;;1965:96;;;:::o;2067:77::-;2104:7;2133:5;2122:16;;2067:77;;;:::o;2150:126::-;2187:7;2227:42;2220:5;2216:54;2205:65;;2150:126;;;:::o;2282:77::-;2319:7;2348:5;2337:16;;2282:77;;;:::o;2365:93::-;2401:7;2441:10;2434:5;2430:22;2419:33;;2365:93;;;:::o;2464:101::-;2500:7;2540:18;2533:5;2529:30;2518:41;;2464:101;;;:::o;2571:180::-;2619:77;2616:1;2609:88;2716:4;2713:1;2706:15;2740:4;2737:1;2730:15;2880:117;2989:1;2986;2979:12;3003:122;3076:24;3094:5;3076:24;:::i;:::-;3069:5;3066:35;3056:63;;3115:1;3112;3105:12;3056:63;3003:122;:::o;3131:::-;3204:24;3222:5;3204:24;:::i;:::-;3197:5;3194:35;3184:63;;3243:1;3240;3233:12;3184:63;3131:122;:::o;3259:::-;3332:24;3350:5;3332:24;:::i;:::-;3325:5;3322:35;3312:63;;3371:1;3368;3361:12;3312:63;3259:122;:::o;3387:120::-;3459:23;3476:5;3459:23;:::i;:::-;3452:5;3449:34;3439:62;;3497:1;3494;3487:12;3439:62;3387:120;:::o;3513:::-;3585:23;3602:5;3585:23;:::i;:::-;3578:5;3575:34;3565:62;;3623:1;3620;3613:12;3565:62;3513:120;:::o;488:6834:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@checkUpkeep_447":{"entryPoint":1767,"id":447,"parameterSlots":1,"returnSlots":2},"@enterRaffle_335":{"entryPoint":835,"id":335,"parameterSlots":0,"returnSlots":0},"@fulfillRandomWords_518":{"entryPoint":1990,"id":518,"parameterSlots":2,"returnSlots":0},"@getEntranceFee_526":{"entryPoint":580,"id":526,"parameterSlots":0,"returnSlots":1},"@getInterval_571":{"entryPoint":1909,"id":571,"parameterSlots":0,"returnSlots":1},"@getNumWords_563":{"entryPoint":1754,"id":563,"parameterSlots":0,"returnSlots":1},"@getPlayer_538":{"entryPoint":1919,"id":538,"parameterSlots":1,"returnSlots":1},"@getRaffleState_555":{"entryPoint":620,"id":555,"parameterSlots":0,"returnSlots":1},"@getRecentWinner_546":{"entryPoint":1712,"id":546,"parameterSlots":0,"returnSlots":1},"@performUpkeep_386":{"entryPoint":1202,"id":386,"parameterSlots":1,"returnSlots":0},"@rawFulfillRandomWords_56":{"entryPoint":643,"id":56,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":2718,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":2830,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":2896,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":2942,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":2988,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":3009,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_memory_ptr":{"entryPoint":3030,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":3103,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":3148,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":3193,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":3285,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3300,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":3315,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":3330,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_enum$_RaffleState_$202_to_t_uint8_fromStack":{"entryPoint":3387,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":3402,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint16_to_t_uint16_fromStack":{"entryPoint":3437,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint16_to_t_uint32_fromStack":{"entryPoint":3452,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":3467,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint32_to_t_uint32_fromStack":{"entryPoint":3482,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":3497,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":3512,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":3533,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":3560,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":3601,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint16__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed":{"entryPoint":3649,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_enum$_RaffleState_$202__to_t_uint8__fromStack_reversed":{"entryPoint":3732,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":3759,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":3786,"id":null,"parameterSlots":4,"returnSlots":1},"allocate_memory":{"entryPoint":3841,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":3868,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":3878,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":3922,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":3971,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":3982,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":3999,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4010,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":4062,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":4080,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":4092,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_enum$_RaffleState_$202":{"entryPoint":4102,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint16":{"entryPoint":4121,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":4135,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":4167,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":4177,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":4193,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_enum$_RaffleState_$202_to_t_uint8":{"entryPoint":4213,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint16_to_t_uint32":{"entryPoint":4231,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":4249,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":4264,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":4315,"id":null,"parameterSlots":2,"returnSlots":0},"mod_t_uint256":{"entryPoint":4364,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":4413,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":4460,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":4507,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4554,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":4601,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":4648,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":4653,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":4658,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":4663,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":4668,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":4673,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470":{"entryPoint":4690,"id":null,"parameterSlots":1,"returnSlots":0},"validator_assert_t_enum$_RaffleState_$202":{"entryPoint":4693,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":4713,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:14618:5","statements":[{"body":{"nodeType":"YulBlock","src":"126:620:5","statements":[{"nodeType":"YulAssignment","src":"136:90:5","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"218:6:5"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"161:56:5"},"nodeType":"YulFunctionCall","src":"161:64:5"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"145:15:5"},"nodeType":"YulFunctionCall","src":"145:81:5"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"136:5:5"}]},{"nodeType":"YulVariableDeclaration","src":"235:16:5","value":{"name":"array","nodeType":"YulIdentifier","src":"246:5:5"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"239:3:5","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"268:5:5"},{"name":"length","nodeType":"YulIdentifier","src":"275:6:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"261:6:5"},"nodeType":"YulFunctionCall","src":"261:21:5"},"nodeType":"YulExpressionStatement","src":"261:21:5"},{"nodeType":"YulAssignment","src":"291:23:5","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"302:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"309:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"298:3:5"},"nodeType":"YulFunctionCall","src":"298:16:5"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"291:3:5"}]},{"nodeType":"YulVariableDeclaration","src":"324:17:5","value":{"name":"offset","nodeType":"YulIdentifier","src":"335:6:5"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"328:3:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"390:103:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"404:77:5"},"nodeType":"YulFunctionCall","src":"404:79:5"},"nodeType":"YulExpressionStatement","src":"404:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"360:3:5"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"369:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"377:4:5","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"365:3:5"},"nodeType":"YulFunctionCall","src":"365:17:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"356:3:5"},"nodeType":"YulFunctionCall","src":"356:27:5"},{"name":"end","nodeType":"YulIdentifier","src":"385:3:5"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"353:2:5"},"nodeType":"YulFunctionCall","src":"353:36:5"},"nodeType":"YulIf","src":"350:143:5"},{"body":{"nodeType":"YulBlock","src":"562:178:5","statements":[{"nodeType":"YulVariableDeclaration","src":"577:21:5","value":{"name":"src","nodeType":"YulIdentifier","src":"595:3:5"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"581:10:5","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"619:3:5"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"645:10:5"},{"name":"end","nodeType":"YulIdentifier","src":"657:3:5"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"624:20:5"},"nodeType":"YulFunctionCall","src":"624:37:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"612:6:5"},"nodeType":"YulFunctionCall","src":"612:50:5"},"nodeType":"YulExpressionStatement","src":"612:50:5"},{"nodeType":"YulAssignment","src":"675:21:5","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"686:3:5"},{"kind":"number","nodeType":"YulLiteral","src":"691:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"682:3:5"},"nodeType":"YulFunctionCall","src":"682:14:5"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"675:3:5"}]},{"nodeType":"YulAssignment","src":"709:21:5","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"720:3:5"},{"kind":"number","nodeType":"YulLiteral","src":"725:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"716:3:5"},"nodeType":"YulFunctionCall","src":"716:14:5"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"709:3:5"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"524:1:5"},{"name":"length","nodeType":"YulIdentifier","src":"527:6:5"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"521:2:5"},"nodeType":"YulFunctionCall","src":"521:13:5"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"535:18:5","statements":[{"nodeType":"YulAssignment","src":"537:14:5","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"546:1:5"},{"kind":"number","nodeType":"YulLiteral","src":"549:1:5","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"542:3:5"},"nodeType":"YulFunctionCall","src":"542:9:5"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"537:1:5"}]}]},"pre":{"nodeType":"YulBlock","src":"506:14:5","statements":[{"nodeType":"YulVariableDeclaration","src":"508:10:5","value":{"kind":"number","nodeType":"YulLiteral","src":"517:1:5","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"512:1:5","type":""}]}]},"src":"502:238:5"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"96:6:5","type":""},{"name":"length","nodeType":"YulTypedName","src":"104:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"112:3:5","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"120:5:5","type":""}],"src":"24:722:5"},{"body":{"nodeType":"YulBlock","src":"835:327:5","statements":[{"nodeType":"YulAssignment","src":"845:74:5","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"911:6:5"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"870:40:5"},"nodeType":"YulFunctionCall","src":"870:48:5"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"854:15:5"},"nodeType":"YulFunctionCall","src":"854:65:5"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"845:5:5"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"935:5:5"},{"name":"length","nodeType":"YulIdentifier","src":"942:6:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"928:6:5"},"nodeType":"YulFunctionCall","src":"928:21:5"},"nodeType":"YulExpressionStatement","src":"928:21:5"},{"nodeType":"YulVariableDeclaration","src":"958:27:5","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"973:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"980:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"969:3:5"},"nodeType":"YulFunctionCall","src":"969:16:5"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"962:3:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"1023:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"1025:77:5"},"nodeType":"YulFunctionCall","src":"1025:79:5"},"nodeType":"YulExpressionStatement","src":"1025:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1004:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"1009:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1000:3:5"},"nodeType":"YulFunctionCall","src":"1000:16:5"},{"name":"end","nodeType":"YulIdentifier","src":"1018:3:5"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"997:2:5"},"nodeType":"YulFunctionCall","src":"997:25:5"},"nodeType":"YulIf","src":"994:112:5"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1139:3:5"},{"name":"dst","nodeType":"YulIdentifier","src":"1144:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"1149:6:5"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"1115:23:5"},"nodeType":"YulFunctionCall","src":"1115:41:5"},"nodeType":"YulExpressionStatement","src":"1115:41:5"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"808:3:5","type":""},{"name":"length","nodeType":"YulTypedName","src":"813:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"821:3:5","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"829:5:5","type":""}],"src":"752:410:5"},{"body":{"nodeType":"YulBlock","src":"1262:293:5","statements":[{"body":{"nodeType":"YulBlock","src":"1311:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"1313:77:5"},"nodeType":"YulFunctionCall","src":"1313:79:5"},"nodeType":"YulExpressionStatement","src":"1313:79:5"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1290:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"1298:4:5","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1286:3:5"},"nodeType":"YulFunctionCall","src":"1286:17:5"},{"name":"end","nodeType":"YulIdentifier","src":"1305:3:5"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1282:3:5"},"nodeType":"YulFunctionCall","src":"1282:27:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1275:6:5"},"nodeType":"YulFunctionCall","src":"1275:35:5"},"nodeType":"YulIf","src":"1272:122:5"},{"nodeType":"YulVariableDeclaration","src":"1403:34:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1430:6:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1417:12:5"},"nodeType":"YulFunctionCall","src":"1417:20:5"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1407:6:5","type":""}]},{"nodeType":"YulAssignment","src":"1446:103:5","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1522:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"1530:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1518:3:5"},"nodeType":"YulFunctionCall","src":"1518:17:5"},{"name":"length","nodeType":"YulIdentifier","src":"1537:6:5"},{"name":"end","nodeType":"YulIdentifier","src":"1545:3:5"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"1455:62:5"},"nodeType":"YulFunctionCall","src":"1455:94:5"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1446:5:5"}]}]},"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1240:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"1248:3:5","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1256:5:5","type":""}],"src":"1185:370:5"},{"body":{"nodeType":"YulBlock","src":"1635:277:5","statements":[{"body":{"nodeType":"YulBlock","src":"1684:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"1686:77:5"},"nodeType":"YulFunctionCall","src":"1686:79:5"},"nodeType":"YulExpressionStatement","src":"1686:79:5"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1663:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"1671:4:5","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1659:3:5"},"nodeType":"YulFunctionCall","src":"1659:17:5"},{"name":"end","nodeType":"YulIdentifier","src":"1678:3:5"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1655:3:5"},"nodeType":"YulFunctionCall","src":"1655:27:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1648:6:5"},"nodeType":"YulFunctionCall","src":"1648:35:5"},"nodeType":"YulIf","src":"1645:122:5"},{"nodeType":"YulVariableDeclaration","src":"1776:34:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1803:6:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1790:12:5"},"nodeType":"YulFunctionCall","src":"1790:20:5"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1780:6:5","type":""}]},{"nodeType":"YulAssignment","src":"1819:87:5","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1879:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"1887:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1875:3:5"},"nodeType":"YulFunctionCall","src":"1875:17:5"},{"name":"length","nodeType":"YulIdentifier","src":"1894:6:5"},{"name":"end","nodeType":"YulIdentifier","src":"1902:3:5"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"1828:46:5"},"nodeType":"YulFunctionCall","src":"1828:78:5"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1819:5:5"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1613:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"1621:3:5","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1629:5:5","type":""}],"src":"1574:338:5"},{"body":{"nodeType":"YulBlock","src":"1970:87:5","statements":[{"nodeType":"YulAssignment","src":"1980:29:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2002:6:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1989:12:5"},"nodeType":"YulFunctionCall","src":"1989:20:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1980:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2045:5:5"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2018:26:5"},"nodeType":"YulFunctionCall","src":"2018:33:5"},"nodeType":"YulExpressionStatement","src":"2018:33:5"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1948:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"1956:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1964:5:5","type":""}],"src":"1918:139:5"},{"body":{"nodeType":"YulBlock","src":"2126:80:5","statements":[{"nodeType":"YulAssignment","src":"2136:22:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2151:6:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2145:5:5"},"nodeType":"YulFunctionCall","src":"2145:13:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2136:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2194:5:5"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2167:26:5"},"nodeType":"YulFunctionCall","src":"2167:33:5"},"nodeType":"YulExpressionStatement","src":"2167:33:5"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2104:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"2112:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2120:5:5","type":""}],"src":"2063:143:5"},{"body":{"nodeType":"YulBlock","src":"2287:432:5","statements":[{"body":{"nodeType":"YulBlock","src":"2333:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2335:77:5"},"nodeType":"YulFunctionCall","src":"2335:79:5"},"nodeType":"YulExpressionStatement","src":"2335:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2308:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"2317:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2304:3:5"},"nodeType":"YulFunctionCall","src":"2304:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"2329:2:5","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2300:3:5"},"nodeType":"YulFunctionCall","src":"2300:32:5"},"nodeType":"YulIf","src":"2297:119:5"},{"nodeType":"YulBlock","src":"2426:286:5","statements":[{"nodeType":"YulVariableDeclaration","src":"2441:45:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2472:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"2483:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2468:3:5"},"nodeType":"YulFunctionCall","src":"2468:17:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2455:12:5"},"nodeType":"YulFunctionCall","src":"2455:31:5"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2445:6:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"2533:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"2535:77:5"},"nodeType":"YulFunctionCall","src":"2535:79:5"},"nodeType":"YulExpressionStatement","src":"2535:79:5"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2505:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"2513:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2502:2:5"},"nodeType":"YulFunctionCall","src":"2502:30:5"},"nodeType":"YulIf","src":"2499:117:5"},{"nodeType":"YulAssignment","src":"2630:72:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2674:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"2685:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2670:3:5"},"nodeType":"YulFunctionCall","src":"2670:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2694:7:5"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"2640:29:5"},"nodeType":"YulFunctionCall","src":"2640:62:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2630:6:5"}]}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2257:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2268:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2280:6:5","type":""}],"src":"2212:507:5"},{"body":{"nodeType":"YulBlock","src":"2791:263:5","statements":[{"body":{"nodeType":"YulBlock","src":"2837:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2839:77:5"},"nodeType":"YulFunctionCall","src":"2839:79:5"},"nodeType":"YulExpressionStatement","src":"2839:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2812:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"2821:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2808:3:5"},"nodeType":"YulFunctionCall","src":"2808:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"2833:2:5","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2804:3:5"},"nodeType":"YulFunctionCall","src":"2804:32:5"},"nodeType":"YulIf","src":"2801:119:5"},{"nodeType":"YulBlock","src":"2930:117:5","statements":[{"nodeType":"YulVariableDeclaration","src":"2945:15:5","value":{"kind":"number","nodeType":"YulLiteral","src":"2959:1:5","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2949:6:5","type":""}]},{"nodeType":"YulAssignment","src":"2974:63:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3009:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"3020:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3005:3:5"},"nodeType":"YulFunctionCall","src":"3005:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3029:7:5"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2984:20:5"},"nodeType":"YulFunctionCall","src":"2984:53:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2974:6:5"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2761:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2772:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2784:6:5","type":""}],"src":"2725:329:5"},{"body":{"nodeType":"YulBlock","src":"3137:274:5","statements":[{"body":{"nodeType":"YulBlock","src":"3183:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3185:77:5"},"nodeType":"YulFunctionCall","src":"3185:79:5"},"nodeType":"YulExpressionStatement","src":"3185:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3158:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"3167:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3154:3:5"},"nodeType":"YulFunctionCall","src":"3154:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"3179:2:5","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3150:3:5"},"nodeType":"YulFunctionCall","src":"3150:32:5"},"nodeType":"YulIf","src":"3147:119:5"},{"nodeType":"YulBlock","src":"3276:128:5","statements":[{"nodeType":"YulVariableDeclaration","src":"3291:15:5","value":{"kind":"number","nodeType":"YulLiteral","src":"3305:1:5","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3295:6:5","type":""}]},{"nodeType":"YulAssignment","src":"3320:74:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3366:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"3377:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3362:3:5"},"nodeType":"YulFunctionCall","src":"3362:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3386:7:5"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"3330:31:5"},"nodeType":"YulFunctionCall","src":"3330:64:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3320:6:5"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3107:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3118:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3130:6:5","type":""}],"src":"3060:351:5"},{"body":{"nodeType":"YulBlock","src":"3525:576:5","statements":[{"body":{"nodeType":"YulBlock","src":"3571:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3573:77:5"},"nodeType":"YulFunctionCall","src":"3573:79:5"},"nodeType":"YulExpressionStatement","src":"3573:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3546:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"3555:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3542:3:5"},"nodeType":"YulFunctionCall","src":"3542:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"3567:2:5","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3538:3:5"},"nodeType":"YulFunctionCall","src":"3538:32:5"},"nodeType":"YulIf","src":"3535:119:5"},{"nodeType":"YulBlock","src":"3664:117:5","statements":[{"nodeType":"YulVariableDeclaration","src":"3679:15:5","value":{"kind":"number","nodeType":"YulLiteral","src":"3693:1:5","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3683:6:5","type":""}]},{"nodeType":"YulAssignment","src":"3708:63:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3743:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"3754:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3739:3:5"},"nodeType":"YulFunctionCall","src":"3739:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3763:7:5"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3718:20:5"},"nodeType":"YulFunctionCall","src":"3718:53:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3708:6:5"}]}]},{"nodeType":"YulBlock","src":"3791:303:5","statements":[{"nodeType":"YulVariableDeclaration","src":"3806:46:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3837:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3848:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3833:3:5"},"nodeType":"YulFunctionCall","src":"3833:18:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3820:12:5"},"nodeType":"YulFunctionCall","src":"3820:32:5"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3810:6:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"3899:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3901:77:5"},"nodeType":"YulFunctionCall","src":"3901:79:5"},"nodeType":"YulExpressionStatement","src":"3901:79:5"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3871:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"3879:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3868:2:5"},"nodeType":"YulFunctionCall","src":"3868:30:5"},"nodeType":"YulIf","src":"3865:117:5"},{"nodeType":"YulAssignment","src":"3996:88:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4056:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"4067:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4052:3:5"},"nodeType":"YulFunctionCall","src":"4052:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4076:7:5"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4006:45:5"},"nodeType":"YulFunctionCall","src":"4006:78:5"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3996:6:5"}]}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3487:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3498:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3510:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3518:6:5","type":""}],"src":"3417:684:5"},{"body":{"nodeType":"YulBlock","src":"4172:53:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4189:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4212:5:5"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4194:17:5"},"nodeType":"YulFunctionCall","src":"4194:24:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4182:6:5"},"nodeType":"YulFunctionCall","src":"4182:37:5"},"nodeType":"YulExpressionStatement","src":"4182:37:5"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4160:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4167:3:5","type":""}],"src":"4107:118:5"},{"body":{"nodeType":"YulBlock","src":"4290:50:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4307:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4327:5:5"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"4312:14:5"},"nodeType":"YulFunctionCall","src":"4312:21:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4300:6:5"},"nodeType":"YulFunctionCall","src":"4300:34:5"},"nodeType":"YulExpressionStatement","src":"4300:34:5"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4278:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4285:3:5","type":""}],"src":"4231:109:5"},{"body":{"nodeType":"YulBlock","src":"4411:53:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4428:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4451:5:5"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"4433:17:5"},"nodeType":"YulFunctionCall","src":"4433:24:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4421:6:5"},"nodeType":"YulFunctionCall","src":"4421:37:5"},"nodeType":"YulExpressionStatement","src":"4421:37:5"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4399:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4406:3:5","type":""}],"src":"4346:118:5"},{"body":{"nodeType":"YulBlock","src":"4560:270:5","statements":[{"nodeType":"YulVariableDeclaration","src":"4570:52:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4616:5:5"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"4584:31:5"},"nodeType":"YulFunctionCall","src":"4584:38:5"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4574:6:5","type":""}]},{"nodeType":"YulAssignment","src":"4631:77:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4696:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"4701:6:5"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4638:57:5"},"nodeType":"YulFunctionCall","src":"4638:70:5"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4631:3:5"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4743:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"4750:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4739:3:5"},"nodeType":"YulFunctionCall","src":"4739:16:5"},{"name":"pos","nodeType":"YulIdentifier","src":"4757:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"4762:6:5"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"4717:21:5"},"nodeType":"YulFunctionCall","src":"4717:52:5"},"nodeType":"YulExpressionStatement","src":"4717:52:5"},{"nodeType":"YulAssignment","src":"4778:46:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4789:3:5"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4816:6:5"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"4794:21:5"},"nodeType":"YulFunctionCall","src":"4794:29:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4785:3:5"},"nodeType":"YulFunctionCall","src":"4785:39:5"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4778:3:5"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4541:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4548:3:5","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4556:3:5","type":""}],"src":"4470:360:5"},{"body":{"nodeType":"YulBlock","src":"4914:79:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4931:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4980:5:5"}],"functionName":{"name":"convert_t_enum$_RaffleState_$202_to_t_uint8","nodeType":"YulIdentifier","src":"4936:43:5"},"nodeType":"YulFunctionCall","src":"4936:50:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4924:6:5"},"nodeType":"YulFunctionCall","src":"4924:63:5"},"nodeType":"YulExpressionStatement","src":"4924:63:5"}]},"name":"abi_encode_t_enum$_RaffleState_$202_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4902:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4909:3:5","type":""}],"src":"4836:157:5"},{"body":{"nodeType":"YulBlock","src":"5162:235:5","statements":[{"nodeType":"YulAssignment","src":"5172:90:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5255:3:5"},{"kind":"number","nodeType":"YulLiteral","src":"5260:1:5","type":"","value":"0"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"5179:75:5"},"nodeType":"YulFunctionCall","src":"5179:83:5"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5172:3:5"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5360:3:5"}],"functionName":{"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulIdentifier","src":"5271:88:5"},"nodeType":"YulFunctionCall","src":"5271:93:5"},"nodeType":"YulExpressionStatement","src":"5271:93:5"},{"nodeType":"YulAssignment","src":"5373:18:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5384:3:5"},{"kind":"number","nodeType":"YulLiteral","src":"5389:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5380:3:5"},"nodeType":"YulFunctionCall","src":"5380:11:5"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5373:3:5"}]}]},"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5150:3:5","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5158:3:5","type":""}],"src":"4999:398:5"},{"body":{"nodeType":"YulBlock","src":"5466:52:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5483:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5505:5:5"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"5488:16:5"},"nodeType":"YulFunctionCall","src":"5488:23:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5476:6:5"},"nodeType":"YulFunctionCall","src":"5476:36:5"},"nodeType":"YulExpressionStatement","src":"5476:36:5"}]},"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5454:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5461:3:5","type":""}],"src":"5403:115:5"},{"body":{"nodeType":"YulBlock","src":"5587:64:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5604:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5638:5:5"}],"functionName":{"name":"convert_t_uint16_to_t_uint32","nodeType":"YulIdentifier","src":"5609:28:5"},"nodeType":"YulFunctionCall","src":"5609:35:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5597:6:5"},"nodeType":"YulFunctionCall","src":"5597:48:5"},"nodeType":"YulExpressionStatement","src":"5597:48:5"}]},"name":"abi_encode_t_uint16_to_t_uint32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5575:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5582:3:5","type":""}],"src":"5524:127:5"},{"body":{"nodeType":"YulBlock","src":"5722:53:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5739:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5762:5:5"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5744:17:5"},"nodeType":"YulFunctionCall","src":"5744:24:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5732:6:5"},"nodeType":"YulFunctionCall","src":"5732:37:5"},"nodeType":"YulExpressionStatement","src":"5732:37:5"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5710:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5717:3:5","type":""}],"src":"5657:118:5"},{"body":{"nodeType":"YulBlock","src":"5844:52:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5861:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5883:5:5"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"5866:16:5"},"nodeType":"YulFunctionCall","src":"5866:23:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5854:6:5"},"nodeType":"YulFunctionCall","src":"5854:36:5"},"nodeType":"YulExpressionStatement","src":"5854:36:5"}]},"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5832:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5839:3:5","type":""}],"src":"5781:115:5"},{"body":{"nodeType":"YulBlock","src":"5965:52:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5982:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6004:5:5"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"5987:16:5"},"nodeType":"YulFunctionCall","src":"5987:23:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5975:6:5"},"nodeType":"YulFunctionCall","src":"5975:36:5"},"nodeType":"YulExpressionStatement","src":"5975:36:5"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5953:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5960:3:5","type":""}],"src":"5902:115:5"},{"body":{"nodeType":"YulBlock","src":"6211:191:5","statements":[{"nodeType":"YulAssignment","src":"6222:154:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6372:3:5"}],"functionName":{"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"6229:141:5"},"nodeType":"YulFunctionCall","src":"6229:147:5"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6222:3:5"}]},{"nodeType":"YulAssignment","src":"6386:10:5","value":{"name":"pos","nodeType":"YulIdentifier","src":"6393:3:5"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6386:3:5"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6198:3:5","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6207:3:5","type":""}],"src":"6023:379:5"},{"body":{"nodeType":"YulBlock","src":"6506:124:5","statements":[{"nodeType":"YulAssignment","src":"6516:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6528:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"6539:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6524:3:5"},"nodeType":"YulFunctionCall","src":"6524:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6516:4:5"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6596:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6609:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"6620:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6605:3:5"},"nodeType":"YulFunctionCall","src":"6605:17:5"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"6552:43:5"},"nodeType":"YulFunctionCall","src":"6552:71:5"},"nodeType":"YulExpressionStatement","src":"6552:71:5"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6478:9:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6490:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6501:4:5","type":""}],"src":"6408:222:5"},{"body":{"nodeType":"YulBlock","src":"6762:206:5","statements":[{"nodeType":"YulAssignment","src":"6772:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6784:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"6795:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6780:3:5"},"nodeType":"YulFunctionCall","src":"6780:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6772:4:5"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6852:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6865:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"6876:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6861:3:5"},"nodeType":"YulFunctionCall","src":"6861:17:5"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"6808:43:5"},"nodeType":"YulFunctionCall","src":"6808:71:5"},"nodeType":"YulExpressionStatement","src":"6808:71:5"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6933:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6946:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"6957:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6942:3:5"},"nodeType":"YulFunctionCall","src":"6942:18:5"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"6889:43:5"},"nodeType":"YulFunctionCall","src":"6889:72:5"},"nodeType":"YulExpressionStatement","src":"6889:72:5"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6726:9:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6738:6:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6746:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6757:4:5","type":""}],"src":"6636:332:5"},{"body":{"nodeType":"YulBlock","src":"7112:269:5","statements":[{"nodeType":"YulAssignment","src":"7122:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7134:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"7145:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7130:3:5"},"nodeType":"YulFunctionCall","src":"7130:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7122:4:5"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7196:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7209:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"7220:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7205:3:5"},"nodeType":"YulFunctionCall","src":"7205:17:5"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"7158:37:5"},"nodeType":"YulFunctionCall","src":"7158:65:5"},"nodeType":"YulExpressionStatement","src":"7158:65:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7244:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"7255:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7240:3:5"},"nodeType":"YulFunctionCall","src":"7240:18:5"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7264:4:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"7270:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7260:3:5"},"nodeType":"YulFunctionCall","src":"7260:20:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7233:6:5"},"nodeType":"YulFunctionCall","src":"7233:48:5"},"nodeType":"YulExpressionStatement","src":"7233:48:5"},{"nodeType":"YulAssignment","src":"7290:84:5","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7360:6:5"},{"name":"tail","nodeType":"YulIdentifier","src":"7369:4:5"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7298:61:5"},"nodeType":"YulFunctionCall","src":"7298:76:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7290:4:5"}]}]},"name":"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7076:9:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7088:6:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7096:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7107:4:5","type":""}],"src":"6974:407:5"},{"body":{"nodeType":"YulBlock","src":"7589:446:5","statements":[{"nodeType":"YulAssignment","src":"7599:27:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7611:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"7622:3:5","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7607:3:5"},"nodeType":"YulFunctionCall","src":"7607:19:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7599:4:5"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7680:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7693:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"7704:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7689:3:5"},"nodeType":"YulFunctionCall","src":"7689:17:5"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"7636:43:5"},"nodeType":"YulFunctionCall","src":"7636:71:5"},"nodeType":"YulExpressionStatement","src":"7636:71:5"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7759:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7772:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"7783:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7768:3:5"},"nodeType":"YulFunctionCall","src":"7768:18:5"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"7717:41:5"},"nodeType":"YulFunctionCall","src":"7717:70:5"},"nodeType":"YulExpressionStatement","src":"7717:70:5"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"7839:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7852:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"7863:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7848:3:5"},"nodeType":"YulFunctionCall","src":"7848:18:5"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"7797:41:5"},"nodeType":"YulFunctionCall","src":"7797:70:5"},"nodeType":"YulExpressionStatement","src":"7797:70:5"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"7919:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7932:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"7943:2:5","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7928:3:5"},"nodeType":"YulFunctionCall","src":"7928:18:5"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"7877:41:5"},"nodeType":"YulFunctionCall","src":"7877:70:5"},"nodeType":"YulExpressionStatement","src":"7877:70:5"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"7999:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8012:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"8023:3:5","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8008:3:5"},"nodeType":"YulFunctionCall","src":"8008:19:5"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"7957:41:5"},"nodeType":"YulFunctionCall","src":"7957:71:5"},"nodeType":"YulExpressionStatement","src":"7957:71:5"}]},"name":"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint16__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7529:9:5","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7541:6:5","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7549:6:5","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7557:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7565:6:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7573:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7584:4:5","type":""}],"src":"7387:648:5"},{"body":{"nodeType":"YulBlock","src":"8152:137:5","statements":[{"nodeType":"YulAssignment","src":"8162:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8174:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"8185:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8170:3:5"},"nodeType":"YulFunctionCall","src":"8170:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8162:4:5"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8255:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8268:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"8279:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8264:3:5"},"nodeType":"YulFunctionCall","src":"8264:17:5"}],"functionName":{"name":"abi_encode_t_enum$_RaffleState_$202_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"8198:56:5"},"nodeType":"YulFunctionCall","src":"8198:84:5"},"nodeType":"YulExpressionStatement","src":"8198:84:5"}]},"name":"abi_encode_tuple_t_enum$_RaffleState_$202__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8124:9:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8136:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8147:4:5","type":""}],"src":"8041:248:5"},{"body":{"nodeType":"YulBlock","src":"8393:124:5","statements":[{"nodeType":"YulAssignment","src":"8403:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8415:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"8426:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8411:3:5"},"nodeType":"YulFunctionCall","src":"8411:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8403:4:5"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8483:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8496:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"8507:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8492:3:5"},"nodeType":"YulFunctionCall","src":"8492:17:5"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8439:43:5"},"nodeType":"YulFunctionCall","src":"8439:71:5"},"nodeType":"YulExpressionStatement","src":"8439:71:5"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8365:9:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8377:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8388:4:5","type":""}],"src":"8295:222:5"},{"body":{"nodeType":"YulBlock","src":"8677:288:5","statements":[{"nodeType":"YulAssignment","src":"8687:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8699:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"8710:2:5","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8695:3:5"},"nodeType":"YulFunctionCall","src":"8695:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8687:4:5"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8767:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8780:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"8791:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8776:3:5"},"nodeType":"YulFunctionCall","src":"8776:17:5"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8723:43:5"},"nodeType":"YulFunctionCall","src":"8723:71:5"},"nodeType":"YulExpressionStatement","src":"8723:71:5"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8848:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8861:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"8872:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8857:3:5"},"nodeType":"YulFunctionCall","src":"8857:18:5"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8804:43:5"},"nodeType":"YulFunctionCall","src":"8804:72:5"},"nodeType":"YulExpressionStatement","src":"8804:72:5"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"8930:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8943:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"8954:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8939:3:5"},"nodeType":"YulFunctionCall","src":"8939:18:5"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8886:43:5"},"nodeType":"YulFunctionCall","src":"8886:72:5"},"nodeType":"YulExpressionStatement","src":"8886:72:5"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8633:9:5","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8645:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8653:6:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8661:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8672:4:5","type":""}],"src":"8523:442:5"},{"body":{"nodeType":"YulBlock","src":"9012:88:5","statements":[{"nodeType":"YulAssignment","src":"9022:30:5","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"9032:18:5"},"nodeType":"YulFunctionCall","src":"9032:20:5"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9022:6:5"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9081:6:5"},{"name":"size","nodeType":"YulIdentifier","src":"9089:4:5"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"9061:19:5"},"nodeType":"YulFunctionCall","src":"9061:33:5"},"nodeType":"YulExpressionStatement","src":"9061:33:5"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"8996:4:5","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"9005:6:5","type":""}],"src":"8971:129:5"},{"body":{"nodeType":"YulBlock","src":"9146:35:5","statements":[{"nodeType":"YulAssignment","src":"9156:19:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9172:2:5","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9166:5:5"},"nodeType":"YulFunctionCall","src":"9166:9:5"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9156:6:5"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"9139:6:5","type":""}],"src":"9106:75:5"},{"body":{"nodeType":"YulBlock","src":"9269:229:5","statements":[{"body":{"nodeType":"YulBlock","src":"9374:22:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"9376:16:5"},"nodeType":"YulFunctionCall","src":"9376:18:5"},"nodeType":"YulExpressionStatement","src":"9376:18:5"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9346:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"9354:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9343:2:5"},"nodeType":"YulFunctionCall","src":"9343:30:5"},"nodeType":"YulIf","src":"9340:56:5"},{"nodeType":"YulAssignment","src":"9406:25:5","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9418:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"9426:4:5","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"9414:3:5"},"nodeType":"YulFunctionCall","src":"9414:17:5"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"9406:4:5"}]},{"nodeType":"YulAssignment","src":"9468:23:5","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"9480:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"9486:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9476:3:5"},"nodeType":"YulFunctionCall","src":"9476:15:5"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"9468:4:5"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"9253:6:5","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"9264:4:5","type":""}],"src":"9187:311:5"},{"body":{"nodeType":"YulBlock","src":"9570:241:5","statements":[{"body":{"nodeType":"YulBlock","src":"9675:22:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"9677:16:5"},"nodeType":"YulFunctionCall","src":"9677:18:5"},"nodeType":"YulExpressionStatement","src":"9677:18:5"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9647:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"9655:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9644:2:5"},"nodeType":"YulFunctionCall","src":"9644:30:5"},"nodeType":"YulIf","src":"9641:56:5"},{"nodeType":"YulAssignment","src":"9707:37:5","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9737:6:5"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"9715:21:5"},"nodeType":"YulFunctionCall","src":"9715:29:5"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"9707:4:5"}]},{"nodeType":"YulAssignment","src":"9781:23:5","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"9793:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"9799:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9789:3:5"},"nodeType":"YulFunctionCall","src":"9789:15:5"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"9781:4:5"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"9554:6:5","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"9565:4:5","type":""}],"src":"9504:307:5"},{"body":{"nodeType":"YulBlock","src":"9875:40:5","statements":[{"nodeType":"YulAssignment","src":"9886:22:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9902:5:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9896:5:5"},"nodeType":"YulFunctionCall","src":"9896:12:5"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9886:6:5"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9858:5:5","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"9868:6:5","type":""}],"src":"9817:98:5"},{"body":{"nodeType":"YulBlock","src":"10016:73:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10033:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"10038:6:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10026:6:5"},"nodeType":"YulFunctionCall","src":"10026:19:5"},"nodeType":"YulExpressionStatement","src":"10026:19:5"},{"nodeType":"YulAssignment","src":"10054:29:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10073:3:5"},{"kind":"number","nodeType":"YulLiteral","src":"10078:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10069:3:5"},"nodeType":"YulFunctionCall","src":"10069:14:5"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"10054:11:5"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9988:3:5","type":""},{"name":"length","nodeType":"YulTypedName","src":"9993:6:5","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"10004:11:5","type":""}],"src":"9921:168:5"},{"body":{"nodeType":"YulBlock","src":"10208:34:5","statements":[{"nodeType":"YulAssignment","src":"10218:18:5","value":{"name":"pos","nodeType":"YulIdentifier","src":"10233:3:5"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"10218:11:5"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10180:3:5","type":""},{"name":"length","nodeType":"YulTypedName","src":"10185:6:5","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"10196:11:5","type":""}],"src":"10095:147:5"},{"body":{"nodeType":"YulBlock","src":"10293:146:5","statements":[{"nodeType":"YulAssignment","src":"10303:25:5","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10326:1:5"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10308:17:5"},"nodeType":"YulFunctionCall","src":"10308:20:5"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"10303:1:5"}]},{"nodeType":"YulAssignment","src":"10337:25:5","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"10360:1:5"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10342:17:5"},"nodeType":"YulFunctionCall","src":"10342:20:5"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"10337:1:5"}]},{"body":{"nodeType":"YulBlock","src":"10384:22:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10386:16:5"},"nodeType":"YulFunctionCall","src":"10386:18:5"},"nodeType":"YulExpressionStatement","src":"10386:18:5"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10378:1:5"},{"name":"y","nodeType":"YulIdentifier","src":"10381:1:5"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10375:2:5"},"nodeType":"YulFunctionCall","src":"10375:8:5"},"nodeType":"YulIf","src":"10372:34:5"},{"nodeType":"YulAssignment","src":"10416:17:5","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10428:1:5"},{"name":"y","nodeType":"YulIdentifier","src":"10431:1:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10424:3:5"},"nodeType":"YulFunctionCall","src":"10424:9:5"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"10416:4:5"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"10279:1:5","type":""},{"name":"y","nodeType":"YulTypedName","src":"10282:1:5","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"10288:4:5","type":""}],"src":"10248:191:5"},{"body":{"nodeType":"YulBlock","src":"10490:51:5","statements":[{"nodeType":"YulAssignment","src":"10500:35:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10529:5:5"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"10511:17:5"},"nodeType":"YulFunctionCall","src":"10511:24:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10500:7:5"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10472:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10482:7:5","type":""}],"src":"10445:96:5"},{"body":{"nodeType":"YulBlock","src":"10589:48:5","statements":[{"nodeType":"YulAssignment","src":"10599:32:5","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10624:5:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10617:6:5"},"nodeType":"YulFunctionCall","src":"10617:13:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10610:6:5"},"nodeType":"YulFunctionCall","src":"10610:21:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10599:7:5"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10571:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10581:7:5","type":""}],"src":"10547:90:5"},{"body":{"nodeType":"YulBlock","src":"10688:32:5","statements":[{"nodeType":"YulAssignment","src":"10698:16:5","value":{"name":"value","nodeType":"YulIdentifier","src":"10709:5:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10698:7:5"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10670:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10680:7:5","type":""}],"src":"10643:77:5"},{"body":{"nodeType":"YulBlock","src":"10786:81:5","statements":[{"nodeType":"YulAssignment","src":"10796:16:5","value":{"name":"value","nodeType":"YulIdentifier","src":"10807:5:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10796:7:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10855:5:5"}],"functionName":{"name":"validator_assert_t_enum$_RaffleState_$202","nodeType":"YulIdentifier","src":"10813:41:5"},"nodeType":"YulFunctionCall","src":"10813:48:5"},"nodeType":"YulExpressionStatement","src":"10813:48:5"}]},"name":"cleanup_t_enum$_RaffleState_$202","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10768:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10778:7:5","type":""}],"src":"10726:141:5"},{"body":{"nodeType":"YulBlock","src":"10917:45:5","statements":[{"nodeType":"YulAssignment","src":"10927:29:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10942:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"10949:6:5","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10938:3:5"},"nodeType":"YulFunctionCall","src":"10938:18:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10927:7:5"}]}]},"name":"cleanup_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10899:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10909:7:5","type":""}],"src":"10873:89:5"},{"body":{"nodeType":"YulBlock","src":"11013:81:5","statements":[{"nodeType":"YulAssignment","src":"11023:65:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11038:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"11045:42:5","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11034:3:5"},"nodeType":"YulFunctionCall","src":"11034:54:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"11023:7:5"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10995:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11005:7:5","type":""}],"src":"10968:126:5"},{"body":{"nodeType":"YulBlock","src":"11145:32:5","statements":[{"nodeType":"YulAssignment","src":"11155:16:5","value":{"name":"value","nodeType":"YulIdentifier","src":"11166:5:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"11155:7:5"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11127:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11137:7:5","type":""}],"src":"11100:77:5"},{"body":{"nodeType":"YulBlock","src":"11227:49:5","statements":[{"nodeType":"YulAssignment","src":"11237:33:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11252:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"11259:10:5","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11248:3:5"},"nodeType":"YulFunctionCall","src":"11248:22:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"11237:7:5"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11209:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11219:7:5","type":""}],"src":"11183:93:5"},{"body":{"nodeType":"YulBlock","src":"11326:57:5","statements":[{"nodeType":"YulAssignment","src":"11336:41:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11351:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"11358:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11347:3:5"},"nodeType":"YulFunctionCall","src":"11347:30:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"11336:7:5"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11308:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11318:7:5","type":""}],"src":"11282:101:5"},{"body":{"nodeType":"YulBlock","src":"11462:68:5","statements":[{"nodeType":"YulAssignment","src":"11472:52:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11518:5:5"}],"functionName":{"name":"cleanup_t_enum$_RaffleState_$202","nodeType":"YulIdentifier","src":"11485:32:5"},"nodeType":"YulFunctionCall","src":"11485:39:5"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"11472:9:5"}]}]},"name":"convert_t_enum$_RaffleState_$202_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11442:5:5","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"11452:9:5","type":""}],"src":"11389:141:5"},{"body":{"nodeType":"YulBlock","src":"11594:52:5","statements":[{"nodeType":"YulAssignment","src":"11604:36:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11634:5:5"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"11617:16:5"},"nodeType":"YulFunctionCall","src":"11617:23:5"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"11604:9:5"}]}]},"name":"convert_t_uint16_to_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11574:5:5","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"11584:9:5","type":""}],"src":"11536:110:5"},{"body":{"nodeType":"YulBlock","src":"11703:103:5","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11726:3:5"},{"name":"src","nodeType":"YulIdentifier","src":"11731:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"11736:6:5"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"11713:12:5"},"nodeType":"YulFunctionCall","src":"11713:30:5"},"nodeType":"YulExpressionStatement","src":"11713:30:5"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11784:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"11789:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11780:3:5"},"nodeType":"YulFunctionCall","src":"11780:16:5"},{"kind":"number","nodeType":"YulLiteral","src":"11798:1:5","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11773:6:5"},"nodeType":"YulFunctionCall","src":"11773:27:5"},"nodeType":"YulExpressionStatement","src":"11773:27:5"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"11685:3:5","type":""},{"name":"dst","nodeType":"YulTypedName","src":"11690:3:5","type":""},{"name":"length","nodeType":"YulTypedName","src":"11695:6:5","type":""}],"src":"11652:154:5"},{"body":{"nodeType":"YulBlock","src":"11861:258:5","statements":[{"nodeType":"YulVariableDeclaration","src":"11871:10:5","value":{"kind":"number","nodeType":"YulLiteral","src":"11880:1:5","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"11875:1:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"11940:63:5","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11965:3:5"},{"name":"i","nodeType":"YulIdentifier","src":"11970:1:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11961:3:5"},"nodeType":"YulFunctionCall","src":"11961:11:5"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11984:3:5"},{"name":"i","nodeType":"YulIdentifier","src":"11989:1:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11980:3:5"},"nodeType":"YulFunctionCall","src":"11980:11:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11974:5:5"},"nodeType":"YulFunctionCall","src":"11974:18:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11954:6:5"},"nodeType":"YulFunctionCall","src":"11954:39:5"},"nodeType":"YulExpressionStatement","src":"11954:39:5"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"11901:1:5"},{"name":"length","nodeType":"YulIdentifier","src":"11904:6:5"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11898:2:5"},"nodeType":"YulFunctionCall","src":"11898:13:5"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"11912:19:5","statements":[{"nodeType":"YulAssignment","src":"11914:15:5","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"11923:1:5"},{"kind":"number","nodeType":"YulLiteral","src":"11926:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11919:3:5"},"nodeType":"YulFunctionCall","src":"11919:10:5"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"11914:1:5"}]}]},"pre":{"nodeType":"YulBlock","src":"11894:3:5","statements":[]},"src":"11890:113:5"},{"body":{"nodeType":"YulBlock","src":"12037:76:5","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"12087:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"12092:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12083:3:5"},"nodeType":"YulFunctionCall","src":"12083:16:5"},{"kind":"number","nodeType":"YulLiteral","src":"12101:1:5","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12076:6:5"},"nodeType":"YulFunctionCall","src":"12076:27:5"},"nodeType":"YulExpressionStatement","src":"12076:27:5"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12018:1:5"},{"name":"length","nodeType":"YulIdentifier","src":"12021:6:5"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12015:2:5"},"nodeType":"YulFunctionCall","src":"12015:13:5"},"nodeType":"YulIf","src":"12012:101:5"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"11843:3:5","type":""},{"name":"dst","nodeType":"YulTypedName","src":"11848:3:5","type":""},{"name":"length","nodeType":"YulTypedName","src":"11853:6:5","type":""}],"src":"11812:307:5"},{"body":{"nodeType":"YulBlock","src":"12168:238:5","statements":[{"nodeType":"YulVariableDeclaration","src":"12178:58:5","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12200:6:5"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"12230:4:5"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"12208:21:5"},"nodeType":"YulFunctionCall","src":"12208:27:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12196:3:5"},"nodeType":"YulFunctionCall","src":"12196:40:5"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"12182:10:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"12347:22:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"12349:16:5"},"nodeType":"YulFunctionCall","src":"12349:18:5"},"nodeType":"YulExpressionStatement","src":"12349:18:5"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"12290:10:5"},{"kind":"number","nodeType":"YulLiteral","src":"12302:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12287:2:5"},"nodeType":"YulFunctionCall","src":"12287:34:5"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"12326:10:5"},{"name":"memPtr","nodeType":"YulIdentifier","src":"12338:6:5"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12323:2:5"},"nodeType":"YulFunctionCall","src":"12323:22:5"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"12284:2:5"},"nodeType":"YulFunctionCall","src":"12284:62:5"},"nodeType":"YulIf","src":"12281:88:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12385:2:5","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"12389:10:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12378:6:5"},"nodeType":"YulFunctionCall","src":"12378:22:5"},"nodeType":"YulExpressionStatement","src":"12378:22:5"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12154:6:5","type":""},{"name":"size","nodeType":"YulTypedName","src":"12162:4:5","type":""}],"src":"12125:281:5"},{"body":{"nodeType":"YulBlock","src":"12446:142:5","statements":[{"nodeType":"YulAssignment","src":"12456:25:5","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12479:1:5"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"12461:17:5"},"nodeType":"YulFunctionCall","src":"12461:20:5"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"12456:1:5"}]},{"nodeType":"YulAssignment","src":"12490:25:5","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"12513:1:5"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"12495:17:5"},"nodeType":"YulFunctionCall","src":"12495:20:5"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"12490:1:5"}]},{"body":{"nodeType":"YulBlock","src":"12537:22:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"12539:16:5"},"nodeType":"YulFunctionCall","src":"12539:18:5"},"nodeType":"YulExpressionStatement","src":"12539:18:5"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"12534:1:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12527:6:5"},"nodeType":"YulFunctionCall","src":"12527:9:5"},"nodeType":"YulIf","src":"12524:35:5"},{"nodeType":"YulAssignment","src":"12568:14:5","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12577:1:5"},{"name":"y","nodeType":"YulIdentifier","src":"12580:1:5"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"12573:3:5"},"nodeType":"YulFunctionCall","src":"12573:9:5"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"12568:1:5"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12435:1:5","type":""},{"name":"y","nodeType":"YulTypedName","src":"12438:1:5","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"12444:1:5","type":""}],"src":"12412:176:5"},{"body":{"nodeType":"YulBlock","src":"12622:152:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12639:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12642:77:5","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12632:6:5"},"nodeType":"YulFunctionCall","src":"12632:88:5"},"nodeType":"YulExpressionStatement","src":"12632:88:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12736:1:5","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12739:4:5","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12729:6:5"},"nodeType":"YulFunctionCall","src":"12729:15:5"},"nodeType":"YulExpressionStatement","src":"12729:15:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12760:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12763:4:5","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12753:6:5"},"nodeType":"YulFunctionCall","src":"12753:15:5"},"nodeType":"YulExpressionStatement","src":"12753:15:5"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"12594:180:5"},{"body":{"nodeType":"YulBlock","src":"12808:152:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12825:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12828:77:5","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12818:6:5"},"nodeType":"YulFunctionCall","src":"12818:88:5"},"nodeType":"YulExpressionStatement","src":"12818:88:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12922:1:5","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12925:4:5","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12915:6:5"},"nodeType":"YulFunctionCall","src":"12915:15:5"},"nodeType":"YulExpressionStatement","src":"12915:15:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12946:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12949:4:5","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12939:6:5"},"nodeType":"YulFunctionCall","src":"12939:15:5"},"nodeType":"YulExpressionStatement","src":"12939:15:5"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"12780:180:5"},{"body":{"nodeType":"YulBlock","src":"12994:152:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13011:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13014:77:5","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13004:6:5"},"nodeType":"YulFunctionCall","src":"13004:88:5"},"nodeType":"YulExpressionStatement","src":"13004:88:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13108:1:5","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13111:4:5","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13101:6:5"},"nodeType":"YulFunctionCall","src":"13101:15:5"},"nodeType":"YulExpressionStatement","src":"13101:15:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13132:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13135:4:5","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13125:6:5"},"nodeType":"YulFunctionCall","src":"13125:15:5"},"nodeType":"YulExpressionStatement","src":"13125:15:5"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"12966:180:5"},{"body":{"nodeType":"YulBlock","src":"13180:152:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13197:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13200:77:5","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13190:6:5"},"nodeType":"YulFunctionCall","src":"13190:88:5"},"nodeType":"YulExpressionStatement","src":"13190:88:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13294:1:5","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13297:4:5","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13287:6:5"},"nodeType":"YulFunctionCall","src":"13287:15:5"},"nodeType":"YulExpressionStatement","src":"13287:15:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13318:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13321:4:5","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13311:6:5"},"nodeType":"YulFunctionCall","src":"13311:15:5"},"nodeType":"YulExpressionStatement","src":"13311:15:5"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"13152:180:5"},{"body":{"nodeType":"YulBlock","src":"13366:152:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13383:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13386:77:5","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13376:6:5"},"nodeType":"YulFunctionCall","src":"13376:88:5"},"nodeType":"YulExpressionStatement","src":"13376:88:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13480:1:5","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13483:4:5","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13473:6:5"},"nodeType":"YulFunctionCall","src":"13473:15:5"},"nodeType":"YulExpressionStatement","src":"13473:15:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13504:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13507:4:5","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13497:6:5"},"nodeType":"YulFunctionCall","src":"13497:15:5"},"nodeType":"YulExpressionStatement","src":"13497:15:5"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"13338:180:5"},{"body":{"nodeType":"YulBlock","src":"13613:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13630:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13633:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13623:6:5"},"nodeType":"YulFunctionCall","src":"13623:12:5"},"nodeType":"YulExpressionStatement","src":"13623:12:5"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"13524:117:5"},{"body":{"nodeType":"YulBlock","src":"13736:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13753:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13756:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13746:6:5"},"nodeType":"YulFunctionCall","src":"13746:12:5"},"nodeType":"YulExpressionStatement","src":"13746:12:5"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"13647:117:5"},{"body":{"nodeType":"YulBlock","src":"13859:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13876:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13879:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13869:6:5"},"nodeType":"YulFunctionCall","src":"13869:12:5"},"nodeType":"YulExpressionStatement","src":"13869:12:5"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"13770:117:5"},{"body":{"nodeType":"YulBlock","src":"13982:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13999:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14002:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13992:6:5"},"nodeType":"YulFunctionCall","src":"13992:12:5"},"nodeType":"YulExpressionStatement","src":"13992:12:5"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"13893:117:5"},{"body":{"nodeType":"YulBlock","src":"14105:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14122:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14125:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14115:6:5"},"nodeType":"YulFunctionCall","src":"14115:12:5"},"nodeType":"YulExpressionStatement","src":"14115:12:5"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"14016:117:5"},{"body":{"nodeType":"YulBlock","src":"14187:54:5","statements":[{"nodeType":"YulAssignment","src":"14197:38:5","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14215:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"14222:2:5","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14211:3:5"},"nodeType":"YulFunctionCall","src":"14211:14:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14231:2:5","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"14227:3:5"},"nodeType":"YulFunctionCall","src":"14227:7:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14207:3:5"},"nodeType":"YulFunctionCall","src":"14207:28:5"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"14197:6:5"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14170:5:5","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"14180:6:5","type":""}],"src":"14139:102:5"},{"body":{"nodeType":"YulBlock","src":"14353:8:5","statements":[]},"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14345:6:5","type":""}],"src":"14247:114:5"},{"body":{"nodeType":"YulBlock","src":"14425:62:5","statements":[{"body":{"nodeType":"YulBlock","src":"14459:22:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x21","nodeType":"YulIdentifier","src":"14461:16:5"},"nodeType":"YulFunctionCall","src":"14461:18:5"},"nodeType":"YulExpressionStatement","src":"14461:18:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14448:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"14455:1:5","type":"","value":"2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14445:2:5"},"nodeType":"YulFunctionCall","src":"14445:12:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14438:6:5"},"nodeType":"YulFunctionCall","src":"14438:20:5"},"nodeType":"YulIf","src":"14435:46:5"}]},"name":"validator_assert_t_enum$_RaffleState_$202","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14418:5:5","type":""}],"src":"14367:120:5"},{"body":{"nodeType":"YulBlock","src":"14536:79:5","statements":[{"body":{"nodeType":"YulBlock","src":"14593:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14602:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14605:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14595:6:5"},"nodeType":"YulFunctionCall","src":"14595:12:5"},"nodeType":"YulExpressionStatement","src":"14595:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14559:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14584:5:5"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"14566:17:5"},"nodeType":"YulFunctionCall","src":"14566:24:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"14556:2:5"},"nodeType":"YulFunctionCall","src":"14556:35:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14549:6:5"},"nodeType":"YulFunctionCall","src":"14549:43:5"},"nodeType":"YulIf","src":"14546:63:5"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14529:5:5","type":""}],"src":"14493:122:5"}]},"contents":"{\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let src := offset\n        if gt(add(src, mul(length, 0x20)), end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n            src := add(src, 0x20)\n        }\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_bytes_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_enum$_RaffleState_$202_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_enum$_RaffleState_$202_to_t_uint8(value))\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function abi_encode_t_uint16_to_t_uint16_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint16(value))\n    }\n\n    function abi_encode_t_uint16_to_t_uint32_fromStack(value, pos) {\n        mstore(pos, convert_t_uint16_to_t_uint32(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint32_to_t_uint32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint32(value))\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint16__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint16_to_t_uint32_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function abi_encode_tuple_t_enum$_RaffleState_$202__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_enum$_RaffleState_$202_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_enum$_RaffleState_$202(value) -> cleaned {\n        cleaned := value validator_assert_t_enum$_RaffleState_$202(value)\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function convert_t_enum$_RaffleState_$202_to_t_uint8(value) -> converted {\n        converted := cleanup_t_enum$_RaffleState_$202(value)\n    }\n\n    function convert_t_uint16_to_t_uint32(value) -> converted {\n        converted := cleanup_t_uint16(value)\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function mod_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function validator_assert_t_enum$_RaffleState_$202(value) {\n        if iszero(lt(value, 2)) { panic_error_0x21() }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":5,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"10":[{"length":32,"start":645},{"length":32,"start":729}],"204":[{"length":32,"start":584},{"length":32,"start":837}],"210":[{"length":32,"start":1385}],"212":[{"length":32,"start":1445}],"214":[{"length":32,"start":1478}],"219":[{"length":32,"start":1513}]},"linkReferences":{},"object":"6080604052600436106100915760003560e01c8063473f1ddc11610059578063473f1ddc1461014857806353a2c19a146101735780636e04ff0d1461019e57806391ad27b4146101dc578063e55ae4e81461020757610091565b806309bc33a714610096578063115cbaf5146100c15780631fe543e3146100ec5780632cfcc539146101155780634585e33b1461011f575b600080fd5b3480156100a257600080fd5b506100ab610244565b6040516100b89190610eaf565b60405180910390f35b3480156100cd57600080fd5b506100d661026c565b6040516100e39190610e94565b60405180910390f35b3480156100f857600080fd5b50610113600480360381019061010e9190610c79565b610283565b005b61011d610343565b005b34801561012b57600080fd5b5061014660048036038101906101419190610bd6565b6104b2565b005b34801561015457600080fd5b5061015d6106b0565b60405161016a9190610dcd565b60405180910390f35b34801561017f57600080fd5b506101886106da565b6040516101959190610eaf565b60405180910390f35b3480156101aa57600080fd5b506101c560048036038101906101c09190610bd6565b6106e7565b6040516101d3929190610e11565b60405180910390f35b3480156101e857600080fd5b506101f1610775565b6040516101fe9190610eaf565b60405180910390f35b34801561021357600080fd5b5061022e60048036038101906102299190610c1f565b61077f565b60405161023b9190610dcd565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461033557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161032c929190610de8565b60405180910390fd5b61033f82826107c6565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561039d576040517f103c37ff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156103b1576103b061119b565b5b600160009054906101000a900460ff1660018111156103d3576103d261119b565b5b1461040a576040517fd6b7f30500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006104cc604051806020016040528060008152506106e7565b5090508061053b5747600080549050600160009054906101000a900460ff1660018111156104fd576104fc61119b565b5b6040517f697a2a3e00000000000000000000000000000000000000000000000000000000815260040161053293929190610eca565b60405180910390fd5b60018060006101000a81548160ff021916908360018111156105605761055f61119b565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161062a959493929190610e41565b602060405180830381600087803b15801561064457600080fd5b505af1158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c9190610c4c565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a2505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600161ffff16905090565b600060606000806001811115610700576106ff61119b565b5b600160009054906101000a900460ff1660018111156107225761072161119b565b5b1490506000600354600254426107389190610faa565b119050600080600080549050119050600080471190508380156107585750825b80156107615750815b801561076a5750805b955050505050915091565b6000600354905090565b6000808281548110610794576107936111ca565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106107e1576107e06111ca565b5b60200260200101516107f3919061110c565b9050600080828154811061080a576108096111ca565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548160ff0219169083600181111561089e5761089d61119b565b5b0217905550600067ffffffffffffffff8111156108be576108bd6111f9565b5b6040519080825280602002602001820160405280156108ec5781602001602082028036833780820191505090505b50600090805190602001906109029291906109f7565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff164760405161093090610db8565b60006040518083038185875af1925050503d806000811461096d576040519150601f19603f3d011682016040523d82523d6000602084013e610972565b606091505b50509050806109ad576040517f93861d6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610a70579160200282015b82811115610a6f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a17565b5b509050610a7d9190610a81565b5090565b5b80821115610a9a576000816000905550600101610a82565b5090565b6000610ab1610aac84610f26565b610f01565b90508083825260208201905082856020860282011115610ad457610ad361122d565b5b60005b85811015610b045781610aea8882610bac565b845260208401935060208301925050600181019050610ad7565b5050509392505050565b6000610b21610b1c84610f52565b610f01565b905082815260208101848484011115610b3d57610b3c611232565b5b610b48848285611099565b509392505050565b600082601f830112610b6557610b64611228565b5b8135610b75848260208601610a9e565b91505092915050565b600082601f830112610b9357610b92611228565b5b8135610ba3848260208601610b0e565b91505092915050565b600081359050610bbb81611269565b92915050565b600081519050610bd081611269565b92915050565b600060208284031215610bec57610beb61123c565b5b600082013567ffffffffffffffff811115610c0a57610c09611237565b5b610c1684828501610b7e565b91505092915050565b600060208284031215610c3557610c3461123c565b5b6000610c4384828501610bac565b91505092915050565b600060208284031215610c6257610c6161123c565b5b6000610c7084828501610bc1565b91505092915050565b60008060408385031215610c9057610c8f61123c565b5b6000610c9e85828601610bac565b925050602083013567ffffffffffffffff811115610cbf57610cbe611237565b5b610ccb85828601610b50565b9150509250929050565b610cde81610fde565b82525050565b610ced81610ff0565b82525050565b610cfc81610ffc565b82525050565b6000610d0d82610f83565b610d178185610f8e565b9350610d278185602086016110a8565b610d3081611241565b840191505092915050565b610d4481611075565b82525050565b6000610d57600083610f9f565b9150610d6282611252565b600082019050919050565b610d7681611019565b82525050565b610d8581611087565b82525050565b610d9481611047565b82525050565b610da381611051565b82525050565b610db281611061565b82525050565b6000610dc382610d4a565b9150819050919050565b6000602082019050610de26000830184610cd5565b92915050565b6000604082019050610dfd6000830185610cd5565b610e0a6020830184610cd5565b9392505050565b6000604082019050610e266000830185610ce4565b8181036020830152610e388184610d02565b90509392505050565b600060a082019050610e566000830188610cf3565b610e636020830187610da9565b610e706040830186610d6d565b610e7d6060830185610d9a565b610e8a6080830184610d7c565b9695505050505050565b6000602082019050610ea96000830184610d3b565b92915050565b6000602082019050610ec46000830184610d8b565b92915050565b6000606082019050610edf6000830186610d8b565b610eec6020830185610d8b565b610ef96040830184610d8b565b949350505050565b6000610f0b610f1c565b9050610f1782826110db565b919050565b6000604051905090565b600067ffffffffffffffff821115610f4157610f406111f9565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610f6d57610f6c6111f9565b5b610f7682611241565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610fb582611047565b9150610fc083611047565b925082821015610fd357610fd261113d565b5b828203905092915050565b6000610fe982611027565b9050919050565b60008115159050919050565b6000819050919050565b600081905061101482611255565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600061108082611006565b9050919050565b600061109282611019565b9050919050565b82818337600083830152505050565b60005b838110156110c65780820151818401526020810190506110ab565b838111156110d5576000848401525b50505050565b6110e482611241565b810181811067ffffffffffffffff82111715611103576111026111f9565b5b80604052505050565b600061111782611047565b915061112283611047565b9250826111325761113161116c565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106112665761126561119b565b5b50565b61127281611047565b811461127d57600080fd5b5056fea264697066735822122002c2cc73b6d25f85d769a9f0ba839aab610c1ad7473d86303eef8aa8ad3f927664736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x91 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x473F1DDC GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x473F1DDC EQ PUSH2 0x148 JUMPI DUP1 PUSH4 0x53A2C19A EQ PUSH2 0x173 JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0x91AD27B4 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0xE55AE4E8 EQ PUSH2 0x207 JUMPI PUSH2 0x91 JUMP JUMPDEST DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0x96 JUMPI DUP1 PUSH4 0x115CBAF5 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0x2CFCC539 EQ PUSH2 0x115 JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0x11F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x244 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xEAF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x26C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0xE94 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x113 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x10E SWAP2 SWAP1 PUSH2 0xC79 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11D PUSH2 0x343 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x146 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xBD6 JUMP JUMPDEST PUSH2 0x4B2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH2 0x6B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16A SWAP2 SWAP1 PUSH2 0xDCD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x188 PUSH2 0x6DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x195 SWAP2 SWAP1 PUSH2 0xEAF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C0 SWAP2 SWAP1 PUSH2 0xBD6 JUMP JUMPDEST PUSH2 0x6E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D3 SWAP3 SWAP2 SWAP1 PUSH2 0xE11 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH2 0x775 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FE SWAP2 SWAP1 PUSH2 0xEAF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x229 SWAP2 SWAP1 PUSH2 0xC1F JUMP JUMPDEST PUSH2 0x77F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23B SWAP2 SWAP1 PUSH2 0xDCD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x335 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32C SWAP3 SWAP2 SWAP1 PUSH2 0xDE8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x33F DUP3 DUP3 PUSH2 0x7C6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x39D JUMPI PUSH1 0x40 MLOAD PUSH32 0x103C37FF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x3B1 JUMPI PUSH2 0x3B0 PUSH2 0x119B JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x3D3 JUMPI PUSH2 0x3D2 PUSH2 0x119B JUMP JUMPDEST JUMPDEST EQ PUSH2 0x40A JUMPI PUSH1 0x40 MLOAD PUSH32 0xD6B7F30500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x805E1D667BDDB8A95F0F09880CF94F403FB596CE79928D9F29B74203BA284D4 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4CC PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x6E7 JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x53B JUMPI SELFBALANCE PUSH1 0x0 DUP1 SLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x4FD JUMPI PUSH2 0x4FC PUSH2 0x119B JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x697A2A3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x532 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xECA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x560 JUMPI PUSH2 0x55F PUSH2 0x119B JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x62A SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE41 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x644 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x658 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x67C SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST SWAP1 POP DUP1 PUSH32 0xCD6E45C8998311CAB7E9D4385596CAC867E20A0587194B954FA3A731C93CE78B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0xFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x700 JUMPI PUSH2 0x6FF PUSH2 0x119B JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x722 JUMPI PUSH2 0x721 PUSH2 0x119B JUMP JUMPDEST JUMPDEST EQ SWAP1 POP PUSH1 0x0 PUSH1 0x3 SLOAD PUSH1 0x2 SLOAD TIMESTAMP PUSH2 0x738 SWAP2 SWAP1 PUSH2 0xFAA JUMP JUMPDEST GT SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SLOAD SWAP1 POP GT SWAP1 POP PUSH1 0x0 DUP1 SELFBALANCE GT SWAP1 POP DUP4 DUP1 ISZERO PUSH2 0x758 JUMPI POP DUP3 JUMPDEST DUP1 ISZERO PUSH2 0x761 JUMPI POP DUP2 JUMPDEST DUP1 ISZERO PUSH2 0x76A JUMPI POP DUP1 JUMPDEST SWAP6 POP POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x794 JUMPI PUSH2 0x793 PUSH2 0x11CA JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD SWAP1 POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7E1 JUMPI PUSH2 0x7E0 PUSH2 0x11CA JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7F3 SWAP2 SWAP1 PUSH2 0x110C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x80A JUMPI PUSH2 0x809 PUSH2 0x11CA JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH1 0x4 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x89E JUMPI PUSH2 0x89D PUSH2 0x119B JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x8BE JUMPI PUSH2 0x8BD PUSH2 0x11F9 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8EC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x902 SWAP3 SWAP2 SWAP1 PUSH2 0x9F7 JUMP JUMPDEST POP TIMESTAMP PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFBALANCE PUSH1 0x40 MLOAD PUSH2 0x930 SWAP1 PUSH2 0xDB8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x96D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x972 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x9AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x93861D6800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x5B690EC4A06FE979403046EAEEA5B3CE38524683C3001F662C8B5A829632F7DF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0xA70 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xA6F JUMPI DUP3 MLOAD DUP3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xA17 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0xA7D SWAP2 SWAP1 PUSH2 0xA81 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xA9A JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0xA82 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAB1 PUSH2 0xAAC DUP5 PUSH2 0xF26 JUMP JUMPDEST PUSH2 0xF01 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0xAD4 JUMPI PUSH2 0xAD3 PUSH2 0x122D JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xB04 JUMPI DUP2 PUSH2 0xAEA DUP9 DUP3 PUSH2 0xBAC JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xAD7 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB21 PUSH2 0xB1C DUP5 PUSH2 0xF52 JUMP JUMPDEST PUSH2 0xF01 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xB3D JUMPI PUSH2 0xB3C PUSH2 0x1232 JUMP JUMPDEST JUMPDEST PUSH2 0xB48 DUP5 DUP3 DUP6 PUSH2 0x1099 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB65 JUMPI PUSH2 0xB64 PUSH2 0x1228 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xB75 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xA9E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB93 JUMPI PUSH2 0xB92 PUSH2 0x1228 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBA3 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xB0E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBBB DUP2 PUSH2 0x1269 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xBD0 DUP2 PUSH2 0x1269 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBEC JUMPI PUSH2 0xBEB PUSH2 0x123C JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC0A JUMPI PUSH2 0xC09 PUSH2 0x1237 JUMP JUMPDEST JUMPDEST PUSH2 0xC16 DUP5 DUP3 DUP6 ADD PUSH2 0xB7E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC35 JUMPI PUSH2 0xC34 PUSH2 0x123C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC43 DUP5 DUP3 DUP6 ADD PUSH2 0xBAC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC62 JUMPI PUSH2 0xC61 PUSH2 0x123C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC70 DUP5 DUP3 DUP6 ADD PUSH2 0xBC1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC90 JUMPI PUSH2 0xC8F PUSH2 0x123C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC9E DUP6 DUP3 DUP7 ADD PUSH2 0xBAC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCBF JUMPI PUSH2 0xCBE PUSH2 0x1237 JUMP JUMPDEST JUMPDEST PUSH2 0xCCB DUP6 DUP3 DUP7 ADD PUSH2 0xB50 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xCDE DUP2 PUSH2 0xFDE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCED DUP2 PUSH2 0xFF0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCFC DUP2 PUSH2 0xFFC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD0D DUP3 PUSH2 0xF83 JUMP JUMPDEST PUSH2 0xD17 DUP2 DUP6 PUSH2 0xF8E JUMP JUMPDEST SWAP4 POP PUSH2 0xD27 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x10A8 JUMP JUMPDEST PUSH2 0xD30 DUP2 PUSH2 0x1241 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xD44 DUP2 PUSH2 0x1075 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD57 PUSH1 0x0 DUP4 PUSH2 0xF9F JUMP JUMPDEST SWAP2 POP PUSH2 0xD62 DUP3 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD76 DUP2 PUSH2 0x1019 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xD85 DUP2 PUSH2 0x1087 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xD94 DUP2 PUSH2 0x1047 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xDA3 DUP2 PUSH2 0x1051 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xDB2 DUP2 PUSH2 0x1061 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDC3 DUP3 PUSH2 0xD4A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xDE2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCD5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xDFD PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xCD5 JUMP JUMPDEST PUSH2 0xE0A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCD5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xE26 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xCE4 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xE38 DUP2 DUP5 PUSH2 0xD02 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0xE56 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0xCF3 JUMP JUMPDEST PUSH2 0xE63 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0xDA9 JUMP JUMPDEST PUSH2 0xE70 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0xD6D JUMP JUMPDEST PUSH2 0xE7D PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xD9A JUMP JUMPDEST PUSH2 0xE8A PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0xD7C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xEA9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD3B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xEC4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD8B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xEDF PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xD8B JUMP JUMPDEST PUSH2 0xEEC PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xD8B JUMP JUMPDEST PUSH2 0xEF9 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xD8B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF0B PUSH2 0xF1C JUMP JUMPDEST SWAP1 POP PUSH2 0xF17 DUP3 DUP3 PUSH2 0x10DB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xF41 JUMPI PUSH2 0xF40 PUSH2 0x11F9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xF6D JUMPI PUSH2 0xF6C PUSH2 0x11F9 JUMP JUMPDEST JUMPDEST PUSH2 0xF76 DUP3 PUSH2 0x1241 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFB5 DUP3 PUSH2 0x1047 JUMP JUMPDEST SWAP2 POP PUSH2 0xFC0 DUP4 PUSH2 0x1047 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0xFD3 JUMPI PUSH2 0xFD2 PUSH2 0x113D JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFE9 DUP3 PUSH2 0x1027 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x1014 DUP3 PUSH2 0x1255 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1080 DUP3 PUSH2 0x1006 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1092 DUP3 PUSH2 0x1019 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x10C6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x10AB JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x10D5 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x10E4 DUP3 PUSH2 0x1241 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1103 JUMPI PUSH2 0x1102 PUSH2 0x11F9 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1117 DUP3 PUSH2 0x1047 JUMP JUMPDEST SWAP2 POP PUSH2 0x1122 DUP4 PUSH2 0x1047 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x1132 JUMPI PUSH2 0x1131 PUSH2 0x116C JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x1266 JUMPI PUSH2 0x1265 PUSH2 0x119B JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH2 0x1272 DUP2 PUSH2 0x1047 JUMP JUMPDEST DUP2 EQ PUSH2 0x127D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MUL 0xC2 0xCC PUSH20 0xB6D25F85D769A9F0BA839AAB610C1AD7473D8630 RETURNDATACOPY 0xEF DUP11 0xA8 0xAD EXTCODEHASH SWAP3 PUSH23 0x64736F6C63430008070033000000000000000000000000 ","sourceMap":"488:6834:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6598:93;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6908:97;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6618:256:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2254:334:4;;;:::i;:::-;;4091:620;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6807:95;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7141:86;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5026:596;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;7233:87;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6697:104;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6598:93;6645:7;6671:13;6664:20;;6598:93;:::o;6908:97::-;6955:11;6985:13;;;;;;;;;;;6978:20;;6908:97;:::o;6618:256:0:-;6731:14;6717:28;;:10;:28;;;6713:109;;6788:10;6800:14;6762:53;;;;;;;;;;;;:::i;:::-;;;;;;;;6713:109;6827:42;6846:9;6857:11;6827:18;:42::i;:::-;6618:256;;:::o;2254:334:4:-;2318:13;2306:9;:25;2302:96;;;2354:33;;;;;;;;;;;;;;2302:96;2428:16;2411:33;;;;;;;;:::i;:::-;;:13;;;;;;;;;;;:33;;;;;;;;:::i;:::-;;;2407:92;;2467:21;;;;;;;;;;;;;;2407:92;2508:9;2531:10;2508:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2570:10;2558:23;;;;;;;;;;;;2254:334::o;4091:620::-;4173:17;4196:15;;;;;;;;;;;;;:11;:15::i;:::-;4172:39;;;4226:12;4221:169;;4288:21;4311:9;:16;;;;4337:13;;;;;;;;;;;4329:22;;;;;;;;:::i;:::-;;4261:91;;;;;;;;;;;;;:::i;:::-;;;;;;;;4221:169;4416:23;4400:13;;:39;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;4449:17;4469:16;:35;;;4518:9;4541:16;956:1;4606:18;1048:1;4469:188;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4449:208;;4694:9;4672:32;;;;;;;;;;4162:549;;4091:620;:::o;6807:95::-;6855:7;6881:14;;;;;;;;;;;6874:21;;6807:95;:::o;7141:86::-;7185:7;1048:1;7204:16;;;;7141:86;:::o;5026:596::-;5119:17;5138:22;5172:11;5204:16;5187:33;;;;;;;;:::i;:::-;;:13;;;;;;;;;;;:33;;;;;;;;:::i;:::-;;;5172:49;;5231:15;5288:10;;5269:15;;5251;:33;;;;:::i;:::-;5250:48;5231:68;;5309:15;5347:1;5328:9;:16;;;;:20;5309:40;;5359:15;5402:1;5378:21;:25;5359:45;;5536:6;:20;;;;;5546:10;5536:20;:34;;;;;5560:10;5536:34;:48;;;;;5574:10;5536:48;5520:65;;5162:460;;;;5026:596;;;:::o;7233:87::-;7277:7;7303:10;;7296:17;;7233:87;:::o;6697:104::-;6752:7;6778:9;6788:5;6778:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6771:23;;6697:104;;;:::o;5712:852::-;6083:9;6112;:16;;;;6095:11;6107:1;6095:14;;;;;;;;:::i;:::-;;;;;;;;:33;;;;:::i;:::-;6083:45;;6138:28;6169:9;6179:1;6169:12;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6138:43;;6208:12;6191:14;;:29;;;;;;;;;;;;;;;;;;6247:16;6231:13;;:32;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;6307:1;6285:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6273:9;:36;;;;;;;;;;;;:::i;:::-;;6337:15;6319;:33;;;;6364:12;6382;:17;;6407:21;6382:51;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6363:70;;;6448:7;6443:74;;6478:28;;;;;;;;;;;;;;6443:74;6544:12;6531:26;;;;;;;;;;;;5811:753;;;5712:852;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;24:722:5:-;120:5;145:81;161:64;218:6;161:64;:::i;:::-;145:81;:::i;:::-;136:90;;246:5;275:6;268:5;261:21;309:4;302:5;298:16;291:23;;335:6;385:3;377:4;369:6;365:17;360:3;356:27;353:36;350:143;;;404:79;;:::i;:::-;350:143;517:1;502:238;527:6;524:1;521:13;502:238;;;595:3;624:37;657:3;645:10;624:37;:::i;:::-;619:3;612:50;691:4;686:3;682:14;675:21;;725:4;720:3;716:14;709:21;;562:178;549:1;546;542:9;537:14;;502:238;;;506:14;126:620;;24:722;;;;;:::o;752:410::-;829:5;854:65;870:48;911:6;870:48;:::i;:::-;854:65;:::i;:::-;845:74;;942:6;935:5;928:21;980:4;973:5;969:16;1018:3;1009:6;1004:3;1000:16;997:25;994:112;;;1025:79;;:::i;:::-;994:112;1115:41;1149:6;1144:3;1139;1115:41;:::i;:::-;835:327;752:410;;;;;:::o;1185:370::-;1256:5;1305:3;1298:4;1290:6;1286:17;1282:27;1272:122;;1313:79;;:::i;:::-;1272:122;1430:6;1417:20;1455:94;1545:3;1537:6;1530:4;1522:6;1518:17;1455:94;:::i;:::-;1446:103;;1262:293;1185:370;;;;:::o;1574:338::-;1629:5;1678:3;1671:4;1663:6;1659:17;1655:27;1645:122;;1686:79;;:::i;:::-;1645:122;1803:6;1790:20;1828:78;1902:3;1894:6;1887:4;1879:6;1875:17;1828:78;:::i;:::-;1819:87;;1635:277;1574:338;;;;:::o;1918:139::-;1964:5;2002:6;1989:20;1980:29;;2018:33;2045:5;2018:33;:::i;:::-;1918:139;;;;:::o;2063:143::-;2120:5;2151:6;2145:13;2136:22;;2167:33;2194:5;2167:33;:::i;:::-;2063:143;;;;:::o;2212:507::-;2280:6;2329:2;2317:9;2308:7;2304:23;2300:32;2297:119;;;2335:79;;:::i;:::-;2297:119;2483:1;2472:9;2468:17;2455:31;2513:18;2505:6;2502:30;2499:117;;;2535:79;;:::i;:::-;2499:117;2640:62;2694:7;2685:6;2674:9;2670:22;2640:62;:::i;:::-;2630:72;;2426:286;2212:507;;;;:::o;2725:329::-;2784:6;2833:2;2821:9;2812:7;2808:23;2804:32;2801:119;;;2839:79;;:::i;:::-;2801:119;2959:1;2984:53;3029:7;3020:6;3009:9;3005:22;2984:53;:::i;:::-;2974:63;;2930:117;2725:329;;;;:::o;3060:351::-;3130:6;3179:2;3167:9;3158:7;3154:23;3150:32;3147:119;;;3185:79;;:::i;:::-;3147:119;3305:1;3330:64;3386:7;3377:6;3366:9;3362:22;3330:64;:::i;:::-;3320:74;;3276:128;3060:351;;;;:::o;3417:684::-;3510:6;3518;3567:2;3555:9;3546:7;3542:23;3538:32;3535:119;;;3573:79;;:::i;:::-;3535:119;3693:1;3718:53;3763:7;3754:6;3743:9;3739:22;3718:53;:::i;:::-;3708:63;;3664:117;3848:2;3837:9;3833:18;3820:32;3879:18;3871:6;3868:30;3865:117;;;3901:79;;:::i;:::-;3865:117;4006:78;4076:7;4067:6;4056:9;4052:22;4006:78;:::i;:::-;3996:88;;3791:303;3417:684;;;;;:::o;4107:118::-;4194:24;4212:5;4194:24;:::i;:::-;4189:3;4182:37;4107:118;;:::o;4231:109::-;4312:21;4327:5;4312:21;:::i;:::-;4307:3;4300:34;4231:109;;:::o;4346:118::-;4433:24;4451:5;4433:24;:::i;:::-;4428:3;4421:37;4346:118;;:::o;4470:360::-;4556:3;4584:38;4616:5;4584:38;:::i;:::-;4638:70;4701:6;4696:3;4638:70;:::i;:::-;4631:77;;4717:52;4762:6;4757:3;4750:4;4743:5;4739:16;4717:52;:::i;:::-;4794:29;4816:6;4794:29;:::i;:::-;4789:3;4785:39;4778:46;;4560:270;4470:360;;;;:::o;4836:157::-;4936:50;4980:5;4936:50;:::i;:::-;4931:3;4924:63;4836:157;;:::o;4999:398::-;5158:3;5179:83;5260:1;5255:3;5179:83;:::i;:::-;5172:90;;5271:93;5360:3;5271:93;:::i;:::-;5389:1;5384:3;5380:11;5373:18;;4999:398;;;:::o;5403:115::-;5488:23;5505:5;5488:23;:::i;:::-;5483:3;5476:36;5403:115;;:::o;5524:127::-;5609:35;5638:5;5609:35;:::i;:::-;5604:3;5597:48;5524:127;;:::o;5657:118::-;5744:24;5762:5;5744:24;:::i;:::-;5739:3;5732:37;5657:118;;:::o;5781:115::-;5866:23;5883:5;5866:23;:::i;:::-;5861:3;5854:36;5781:115;;:::o;5902:::-;5987:23;6004:5;5987:23;:::i;:::-;5982:3;5975:36;5902:115;;:::o;6023:379::-;6207:3;6229:147;6372:3;6229:147;:::i;:::-;6222:154;;6393:3;6386:10;;6023:379;;;:::o;6408:222::-;6501:4;6539:2;6528:9;6524:18;6516:26;;6552:71;6620:1;6609:9;6605:17;6596:6;6552:71;:::i;:::-;6408:222;;;;:::o;6636:332::-;6757:4;6795:2;6784:9;6780:18;6772:26;;6808:71;6876:1;6865:9;6861:17;6852:6;6808:71;:::i;:::-;6889:72;6957:2;6946:9;6942:18;6933:6;6889:72;:::i;:::-;6636:332;;;;;:::o;6974:407::-;7107:4;7145:2;7134:9;7130:18;7122:26;;7158:65;7220:1;7209:9;7205:17;7196:6;7158:65;:::i;:::-;7270:9;7264:4;7260:20;7255:2;7244:9;7240:18;7233:48;7298:76;7369:4;7360:6;7298:76;:::i;:::-;7290:84;;6974:407;;;;;:::o;7387:648::-;7584:4;7622:3;7611:9;7607:19;7599:27;;7636:71;7704:1;7693:9;7689:17;7680:6;7636:71;:::i;:::-;7717:70;7783:2;7772:9;7768:18;7759:6;7717:70;:::i;:::-;7797;7863:2;7852:9;7848:18;7839:6;7797:70;:::i;:::-;7877;7943:2;7932:9;7928:18;7919:6;7877:70;:::i;:::-;7957:71;8023:3;8012:9;8008:19;7999:6;7957:71;:::i;:::-;7387:648;;;;;;;;:::o;8041:248::-;8147:4;8185:2;8174:9;8170:18;8162:26;;8198:84;8279:1;8268:9;8264:17;8255:6;8198:84;:::i;:::-;8041:248;;;;:::o;8295:222::-;8388:4;8426:2;8415:9;8411:18;8403:26;;8439:71;8507:1;8496:9;8492:17;8483:6;8439:71;:::i;:::-;8295:222;;;;:::o;8523:442::-;8672:4;8710:2;8699:9;8695:18;8687:26;;8723:71;8791:1;8780:9;8776:17;8767:6;8723:71;:::i;:::-;8804:72;8872:2;8861:9;8857:18;8848:6;8804:72;:::i;:::-;8886;8954:2;8943:9;8939:18;8930:6;8886:72;:::i;:::-;8523:442;;;;;;:::o;8971:129::-;9005:6;9032:20;;:::i;:::-;9022:30;;9061:33;9089:4;9081:6;9061:33;:::i;:::-;8971:129;;;:::o;9106:75::-;9139:6;9172:2;9166:9;9156:19;;9106:75;:::o;9187:311::-;9264:4;9354:18;9346:6;9343:30;9340:56;;;9376:18;;:::i;:::-;9340:56;9426:4;9418:6;9414:17;9406:25;;9486:4;9480;9476:15;9468:23;;9187:311;;;:::o;9504:307::-;9565:4;9655:18;9647:6;9644:30;9641:56;;;9677:18;;:::i;:::-;9641:56;9715:29;9737:6;9715:29;:::i;:::-;9707:37;;9799:4;9793;9789:15;9781:23;;9504:307;;;:::o;9817:98::-;9868:6;9902:5;9896:12;9886:22;;9817:98;;;:::o;9921:168::-;10004:11;10038:6;10033:3;10026:19;10078:4;10073:3;10069:14;10054:29;;9921:168;;;;:::o;10095:147::-;10196:11;10233:3;10218:18;;10095:147;;;;:::o;10248:191::-;10288:4;10308:20;10326:1;10308:20;:::i;:::-;10303:25;;10342:20;10360:1;10342:20;:::i;:::-;10337:25;;10381:1;10378;10375:8;10372:34;;;10386:18;;:::i;:::-;10372:34;10431:1;10428;10424:9;10416:17;;10248:191;;;;:::o;10445:96::-;10482:7;10511:24;10529:5;10511:24;:::i;:::-;10500:35;;10445:96;;;:::o;10547:90::-;10581:7;10624:5;10617:13;10610:21;10599:32;;10547:90;;;:::o;10643:77::-;10680:7;10709:5;10698:16;;10643:77;;;:::o;10726:141::-;10778:7;10807:5;10796:16;;10813:48;10855:5;10813:48;:::i;:::-;10726:141;;;:::o;10873:89::-;10909:7;10949:6;10942:5;10938:18;10927:29;;10873:89;;;:::o;10968:126::-;11005:7;11045:42;11038:5;11034:54;11023:65;;10968:126;;;:::o;11100:77::-;11137:7;11166:5;11155:16;;11100:77;;;:::o;11183:93::-;11219:7;11259:10;11252:5;11248:22;11237:33;;11183:93;;;:::o;11282:101::-;11318:7;11358:18;11351:5;11347:30;11336:41;;11282:101;;;:::o;11389:141::-;11452:9;11485:39;11518:5;11485:39;:::i;:::-;11472:52;;11389:141;;;:::o;11536:110::-;11584:9;11617:23;11634:5;11617:23;:::i;:::-;11604:36;;11536:110;;;:::o;11652:154::-;11736:6;11731:3;11726;11713:30;11798:1;11789:6;11784:3;11780:16;11773:27;11652:154;;;:::o;11812:307::-;11880:1;11890:113;11904:6;11901:1;11898:13;11890:113;;;11989:1;11984:3;11980:11;11974:18;11970:1;11965:3;11961:11;11954:39;11926:2;11923:1;11919:10;11914:15;;11890:113;;;12021:6;12018:1;12015:13;12012:101;;;12101:1;12092:6;12087:3;12083:16;12076:27;12012:101;11861:258;11812:307;;;:::o;12125:281::-;12208:27;12230:4;12208:27;:::i;:::-;12200:6;12196:40;12338:6;12326:10;12323:22;12302:18;12290:10;12287:34;12284:62;12281:88;;;12349:18;;:::i;:::-;12281:88;12389:10;12385:2;12378:22;12168:238;12125:281;;:::o;12412:176::-;12444:1;12461:20;12479:1;12461:20;:::i;:::-;12456:25;;12495:20;12513:1;12495:20;:::i;:::-;12490:25;;12534:1;12524:35;;12539:18;;:::i;:::-;12524:35;12580:1;12577;12573:9;12568:14;;12412:176;;;;:::o;12594:180::-;12642:77;12639:1;12632:88;12739:4;12736:1;12729:15;12763:4;12760:1;12753:15;12780:180;12828:77;12825:1;12818:88;12925:4;12922:1;12915:15;12949:4;12946:1;12939:15;12966:180;13014:77;13011:1;13004:88;13111:4;13108:1;13101:15;13135:4;13132:1;13125:15;13152:180;13200:77;13197:1;13190:88;13297:4;13294:1;13287:15;13321:4;13318:1;13311:15;13338:180;13386:77;13383:1;13376:88;13483:4;13480:1;13473:15;13507:4;13504:1;13497:15;13524:117;13633:1;13630;13623:12;13647:117;13756:1;13753;13746:12;13770:117;13879:1;13876;13869:12;13893:117;14002:1;13999;13992:12;14016:117;14125:1;14122;14115:12;14139:102;14180:6;14231:2;14227:7;14222:2;14215:5;14211:14;14207:28;14197:38;;14139:102;;;:::o;14247:114::-;;:::o;14367:120::-;14455:1;14448:5;14445:12;14435:46;;14461:18;;:::i;:::-;14435:46;14367:120;:::o;14493:122::-;14566:24;14584:5;14566:24;:::i;:::-;14559:5;14556:35;14546:63;;14605:1;14602;14595:12;14546:63;14493:122;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"958000","executionCost":"infinite","totalCost":"infinite"},"external":{"checkUpkeep(bytes)":"infinite","enterRaffle()":"infinite","getEntranceFee()":"infinite","getInterval()":"2503","getNumWords()":"365","getPlayer(uint256)":"5055","getRaffleState()":"2591","getRecentWinner()":"2522","performUpkeep(bytes)":"infinite","rawFulfillRandomWords(uint256,uint256[])":"infinite"},"internal":{"fulfillRandomWords(uint256,uint256[] memory)":"infinite"}},"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","enterRaffle()":"2cfcc539","getEntranceFee()":"09bc33a7","getInterval()":"91ad27b4","getNumWords()":"53a2c19a","getPlayer(uint256)":"e55ae4e8","getRaffleState()":"115cbaf5","getRecentWinner()":"473f1ddc","performUpkeep(bytes)":"4585e33b","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numplayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"RossRaffle_UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RossRaffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RossRaffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RossRaffle__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"something\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum RossRaffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"this is a function that chainlink keeper nodes call on a regular basis they expect it to return true when true, we do a new random winner *** for this to work, our contract needs to be in an \\\"open\\\" state *** so we are not in the middle of a previous lottery\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RossLottery.sol\":\"RossRaffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/RossLottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror RossRaffle__NotEnoughETHEntered();\\nerror RossRaffle__TransferFailed();\\nerror RossRaffle__NotOpen();\\nerror RossRaffle_UpkeepNotNeeded(uint256 currentBalance, uint256 numplayers, uint256 raffleState);\\n\\ncontract RossRaffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    /* Types */\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    /* state variables */\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant NUM_WORDS = 1;\\n\\n    RaffleState private s_raffleState;\\n    uint256 private s_lastTimeStamp; // last block\\n    uint256 private i_interval;\\n\\n    // lottery vars\\n    address private s_recentWinner;\\n\\n    /* events */\\n    event RaffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    // main constructor needs to include the address param that the secondary constructor\\n    constructor(\\n        address vrfCoordinatorV2, //contract address.  this is a tip that we'll need to implement a MOCK if we want to do testing\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2); // wrap the address in the coordinator interface\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    /* functions */\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert RossRaffle__NotEnoughETHEntered();\\n        }\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert RossRaffle__NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    // REPLACED BY PERFORMUPKEEP\\n    /*function requestRandomWinner() internal {\\n        s_raffleState = RaffleState.CALCULATING;\\n        // request the random number\\n        //  we need to use requestRandomWords() which is in the VRFCoordinatorV2Interface contract\\n        //  which means we need to get that [go to constructor and establish the coordinator object]\\n        //      this returns a uint256 request ID\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane, // the \\\"gas lane\\\" which we can use to reduce gas costs.  we set this up in constructor.  called keyHash in docs.\\n            i_subscriptionId, // the subscription that we need for funding our requests.  there's a contract on chain that does this for us.  we make requests to subscriptions\\n            REQUEST_CONFIRMATIONS, //requestConfirmations,   // uint16 - how many confirmations we should wait before responding.  constant!\\n            i_callbackGasLimit, // uint32 limit for how much gas to use for the callback request to use to fulfillrandomwords.  protects us from spaffing loads by accidents\\n            NUM_WORDS // how many random numbers we want\\n        );\\n        emit RequestedRaffleWinner(requestId); //emit an event to track this\\n\\n        // once we get the random number, pick a winner from our array of participants\\n        // it's a 2 transaction process which helps us avoid brute forcing issues\\n    }*/\\n\\n    // this version is external so we need to do more validation\\n    function performUpkeep(bytes memory /*performData*/) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert RossRaffle_UpkeepNotNeeded(address(this).balance, s_players.length, uint256(s_raffleState)); // for some error checking\\n        }\\n\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    /**\\n     * this is a function that chainlink keeper nodes call on a regular basis\\n     * they expect it to return true\\n     * when true, we do a new random winner\\n     * *** for this to work, our contract needs to be in an \\\"open\\\" state\\n     * *** so we are not in the middle of a previous lottery\\n     */\\n    function checkUpkeep(\\n        bytes memory /*checkData*/\\n    ) public view override returns (bool upkeepNeeded, bytes memory something) {\\n        bool isOpen = (s_raffleState == RaffleState.OPEN);\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = (address(this).balance > 0);\\n\\n        // time to end the lottery!\\n        //return (isOpen && timePassed && hasPlayers && hasBalance);\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance); // auto returns upkeepNeeded?\\n    }\\n\\n    //randomWords will be size 1 for us, since that's all we requested in NUM_WORDS\\n    function fulfillRandomWords(uint256 /*requestId*/, uint256[] memory randomWords) internal override {\\n        // example: s_players is size 10 and our random n is 207\\n        // 207 % 10 -> 7\\n        // so the modulus will always give us a number from 0 to (size of array of participants - 1)\\n        // which is perfect for picking a random winner from our array\\n        uint256 n = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[n];\\n        s_recentWinner = recentWinner;\\n\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert RossRaffle__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    /* views and getters */\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    // this isn't reading from storage - it's a constant so it's in the ABI\\n    // so we can use PURE instead of VIEW to save gas\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n}\\n\",\"keccak256\":\"0x5da20bc70a118b900a6c14d2c3bd429a76cfb5ab6d83e4bfe00577d484d5ae14\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":207,"contract":"contracts/RossLottery.sol:RossRaffle","label":"s_players","offset":0,"slot":"0","type":"t_array(t_address_payable)dyn_storage"},{"astId":225,"contract":"contracts/RossLottery.sol:RossRaffle","label":"s_raffleState","offset":0,"slot":"1","type":"t_enum(RaffleState)202"},{"astId":227,"contract":"contracts/RossLottery.sol:RossRaffle","label":"s_lastTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":229,"contract":"contracts/RossLottery.sol:RossRaffle","label":"i_interval","offset":0,"slot":"3","type":"t_uint256"},{"astId":231,"contract":"contracts/RossLottery.sol:RossRaffle","label":"s_recentWinner","offset":0,"slot":"4","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_array(t_address_payable)dyn_storage":{"base":"t_address_payable","encoding":"dynamic_array","label":"address payable[]","numberOfBytes":"32"},"t_enum(RaffleState)202":{"encoding":"inplace","label":"enum RossRaffle.RaffleState","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"checkUpkeep(bytes)":{"notice":"this is a function that chainlink keeper nodes call on a regular basis they expect it to return true when true, we do a new random winner *** for this to work, our contract needs to be in an \"open\" state *** so we are not in the middle of a previous lottery"}},"version":1}}}}}}